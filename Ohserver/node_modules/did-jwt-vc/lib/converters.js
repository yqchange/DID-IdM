"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformPresentationInput = exports.normalizePresentation = exports.transformCredentialInput = exports.normalizeCredential = exports.attestationToVcFormat = exports.isLegacyAttestationFormat = exports.notEmpty = exports.asArray = void 0;
var did_jwt_1 = require("did-jwt");
var constants_1 = require("./constants");
function asArray(input) {
    return Array.isArray(input) ? input : [input];
}
exports.asArray = asArray;
function deepCopy(obj) {
    var e_1, _a;
    var copy;
    // Handle the 3 simple types, and null or undefined
    if (null === obj || 'object' !== typeof obj)
        return obj;
    // Handle Date
    if (obj instanceof Date) {
        copy = new Date();
        copy.setTime(obj.getTime());
        return copy;
    }
    // Handle Array
    if (obj instanceof Array) {
        copy = obj.map(deepCopy);
        return copy;
    }
    // Handle Object
    if (obj instanceof Object) {
        copy = {};
        try {
            for (var _b = __values(Object.keys(obj)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var key = _c.value;
                copy[key] = deepCopy(obj[key]);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return copy;
    }
    throw new Error("Unable to copy obj! Its type isn't supported.");
}
function notEmpty(value) {
    return value !== null && value !== undefined;
}
exports.notEmpty = notEmpty;
function cleanUndefined(input) {
    if (typeof input !== 'object') {
        return input;
    }
    var obj = __assign({}, input);
    Object.keys(obj).forEach(function (key) { return obj[key] === undefined && delete obj[key]; });
    return obj;
}
function isLegacyAttestationFormat(payload) {
    // payload is an object and has all the required fields of old attestation format
    return payload instanceof Object && payload.sub && payload.iss && payload.claim && payload.iat;
}
exports.isLegacyAttestationFormat = isLegacyAttestationFormat;
function attestationToVcFormat(payload) {
    var iat = payload.iat, nbf = payload.nbf, claim = payload.claim, vc = payload.vc, rest = __rest(payload, ["iat", "nbf", "claim", "vc"]);
    var result = __assign(__assign({}, rest), { nbf: nbf ? nbf : iat, vc: {
            '@context': [constants_1.DEFAULT_CONTEXT],
            type: [constants_1.DEFAULT_VC_TYPE],
            credentialSubject: payload.claim
        } });
    if (vc)
        payload.issVc = vc;
    return result;
}
exports.attestationToVcFormat = attestationToVcFormat;
function normalizeJwtCredentialPayload(input, removeOriginalFields) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    if (removeOriginalFields === void 0) { removeOriginalFields = true; }
    var result = deepCopy(input);
    if (isLegacyAttestationFormat(input)) {
        result = attestationToVcFormat(input);
    }
    // FIXME: handle case when credentialSubject(s) are not object types
    result.credentialSubject = __assign(__assign({}, input.credentialSubject), (_a = input.vc) === null || _a === void 0 ? void 0 : _a.credentialSubject);
    if (input.sub && !((_b = input.credentialSubject) === null || _b === void 0 ? void 0 : _b.id)) {
        result.credentialSubject.id = input.sub;
        if (removeOriginalFields) {
            delete result.sub;
        }
    }
    if (removeOriginalFields) {
        (_c = result.vc) === null || _c === void 0 ? true : delete _c.credentialSubject;
    }
    if (typeof input.issuer === 'undefined' || typeof input.issuer === 'object') {
        result.issuer = cleanUndefined(__assign({ id: input.iss }, input.issuer));
        if (removeOriginalFields && !((_d = input.issuer) === null || _d === void 0 ? void 0 : _d.id)) {
            delete result.iss;
        }
    }
    if (!input.id && input.jti) {
        result.id = result.id || result.jti;
        if (removeOriginalFields) {
            delete result.jti;
        }
    }
    var types = __spreadArray(__spreadArray([], __read(asArray(result.type))), __read(asArray((_e = result.vc) === null || _e === void 0 ? void 0 : _e.type))).filter(notEmpty);
    result.type = __spreadArray([], __read(new Set(types)));
    if (removeOriginalFields) {
        (_f = result.vc) === null || _f === void 0 ? true : delete _f.type;
    }
    var contextArray = __spreadArray(__spreadArray(__spreadArray([], __read(asArray(input.context))), __read(asArray(input['@context']))), __read(asArray((_g = input.vc) === null || _g === void 0 ? void 0 : _g['@context']))).filter(notEmpty);
    result['@context'] = __spreadArray([], __read(new Set(contextArray)));
    if (removeOriginalFields) {
        delete result.context;
        (_h = result.vc) === null || _h === void 0 ? true : delete _h['@context'];
    }
    if (!input.issuanceDate && (input.iat || input.nbf)) {
        result.issuanceDate = new Date((input.nbf || input.iat) * 1000).toISOString();
        if (removeOriginalFields) {
            if (input.nbf) {
                delete result.nbf;
            }
            else {
                delete result.iat;
            }
        }
    }
    if (!input.expirationDate && input.exp) {
        result.expirationDate = new Date(input.exp * 1000).toISOString();
        if (removeOriginalFields) {
            delete result.exp;
        }
    }
    if (removeOriginalFields) {
        if (result.vc && Object.keys(result.vc).length === 0) {
            delete result.vc;
        }
    }
    // FIXME: interpret `aud` property as `verifier`
    return result;
}
function normalizeJwtCredential(input, removeOriginalFields) {
    if (removeOriginalFields === void 0) { removeOriginalFields = true; }
    var decoded;
    try {
        decoded = did_jwt_1.decodeJWT(input);
    }
    catch (e) {
        throw new TypeError('unknown credential format');
    }
    return __assign(__assign({}, normalizeJwtCredentialPayload(decoded.payload, removeOriginalFields)), { proof: {
            type: constants_1.DEFAULT_JWT_PROOF_TYPE,
            jwt: input
        } });
}
/**
 * Normalizes a credential payload into an unambiguous W3C credential data type
 * In case of conflict, Existing W3C Credential specific properties take precedence,
 * except for arrays and object types which get merged.
 * @param input either a JWT or JWT payload, or a VerifiableCredential
 */
function normalizeCredential(input, removeOriginalFields) {
    var _a;
    if (removeOriginalFields === void 0) { removeOriginalFields = true; }
    if (typeof input === 'string') {
        if (constants_1.JWT_FORMAT.test(input)) {
            return normalizeJwtCredential(input, removeOriginalFields);
        }
        else {
            var parsed = void 0;
            try {
                parsed = JSON.parse(input);
            }
            catch (e) {
                throw new TypeError('unknown credential format');
            }
            return normalizeCredential(parsed, removeOriginalFields);
        }
    }
    else if ((_a = input.proof) === null || _a === void 0 ? void 0 : _a.jwt) {
        // TODO: test that it correctly propagates app specific proof properties
        return deepCopy(__assign(__assign({}, normalizeJwtCredential(input.proof.jwt, removeOriginalFields)), { proof: input.proof }));
    }
    else {
        // TODO: test that it accepts JWT payload, CredentialPayload, VerifiableCredential
        // TODO: test that it correctly propagates proof, if any
        return __assign({ proof: {} }, normalizeJwtCredentialPayload(input, removeOriginalFields));
    }
}
exports.normalizeCredential = normalizeCredential;
/**
 * Transforms a W3C Credential payload into a JWT compatible encoding.
 * The method accepts app specific fields and in case of collision, existing JWT properties will take precedence.
 * Also, `nbf`, `exp` and `jti` properties can be explicitly set to `undefined` and they will be kept intact.
 * @param input either a JWT payload or a CredentialPayloadInput
 */
function transformCredentialInput(input, removeOriginalFields) {
    var _a, _b, _c, _d, _e;
    if (removeOriginalFields === void 0) { removeOriginalFields = true; }
    if (Array.isArray(input.credentialSubject))
        throw Error('credentialSubject of type array not supported');
    var result = deepCopy(__assign({ vc: __assign({}, input.vc) }, input));
    var credentialSubject = __assign(__assign({}, input.credentialSubject), (_a = input.vc) === null || _a === void 0 ? void 0 : _a.credentialSubject);
    if (!input.sub) {
        result.sub = (_b = input.credentialSubject) === null || _b === void 0 ? void 0 : _b.id;
        if (removeOriginalFields) {
            delete credentialSubject.id;
        }
    }
    result.vc.credentialSubject = credentialSubject;
    if (removeOriginalFields) {
        delete result.credentialSubject;
    }
    var contextEntries = __spreadArray(__spreadArray(__spreadArray([], __read(asArray(input.context))), __read(asArray(input['@context']))), __read(asArray((_c = input.vc) === null || _c === void 0 ? void 0 : _c['@context']))).filter(notEmpty);
    result.vc['@context'] = __spreadArray([], __read(new Set(contextEntries)));
    if (removeOriginalFields) {
        delete result.context;
        delete result['@context'];
    }
    var types = __spreadArray(__spreadArray([], __read(asArray(input.type))), __read(asArray((_d = input.vc) === null || _d === void 0 ? void 0 : _d.type))).filter(notEmpty);
    result.vc.type = __spreadArray([], __read(new Set(types)));
    if (removeOriginalFields) {
        delete result.type;
    }
    if (input.id && Object.getOwnPropertyNames(input).indexOf('jti') === -1) {
        result.jti = input.id;
        if (removeOriginalFields) {
            delete result.id;
        }
    }
    if (input.issuanceDate && Object.getOwnPropertyNames(input).indexOf('nbf') === -1) {
        var converted = Date.parse(input.issuanceDate);
        if (!isNaN(converted)) {
            result.nbf = Math.floor(converted / 1000);
            if (removeOriginalFields) {
                delete result.issuanceDate;
            }
        }
    }
    if (input.expirationDate && Object.getOwnPropertyNames(input).indexOf('exp') === -1) {
        var converted = Date.parse(input.expirationDate);
        if (!isNaN(converted)) {
            result.exp = Math.floor(converted / 1000);
            if (removeOriginalFields) {
                delete result.expirationDate;
            }
        }
    }
    if (input.issuer && Object.getOwnPropertyNames(input).indexOf('iss') === -1) {
        if (typeof input.issuer === 'object') {
            result.iss = (_e = input.issuer) === null || _e === void 0 ? void 0 : _e.id;
            if (removeOriginalFields) {
                delete result.issuer.id;
                if (Object.keys(result.issuer).length === 0) {
                    delete result.issuer;
                }
            }
        }
        else if (typeof input.issuer === 'string') {
            result.iss = input.iss || '' + input.issuer;
            if (removeOriginalFields) {
                delete result.issuer;
            }
        }
        else {
            // nop
        }
    }
    return result;
}
exports.transformCredentialInput = transformCredentialInput;
function normalizeJwtPresentationPayload(input, removeOriginalFields) {
    var _a, _b, _c, _d, _e, _f;
    if (removeOriginalFields === void 0) { removeOriginalFields = true; }
    var result = deepCopy(input);
    result.verifiableCredential = __spreadArray(__spreadArray([], __read(asArray(input.verifiableCredential))), __read(asArray((_a = input.vp) === null || _a === void 0 ? void 0 : _a.verifiableCredential))).filter(notEmpty);
    result.verifiableCredential = result.verifiableCredential.map(function (cred) {
        return normalizeCredential(cred, removeOriginalFields);
    });
    if (removeOriginalFields) {
        (_b = result.vp) === null || _b === void 0 ? true : delete _b.verifiableCredential;
    }
    if (input.iss && !input.holder) {
        result.holder = input.iss;
        if (removeOriginalFields) {
            delete result.iss;
        }
    }
    if (input.aud) {
        result.verifier = __spreadArray(__spreadArray([], __read(asArray(input.verifier))), __read(asArray(input.aud))).filter(notEmpty);
        result.verifier = __spreadArray([], __read(new Set(result.verifier)));
        if (removeOriginalFields) {
            delete result.aud;
        }
    }
    if (input.jti && Object.getOwnPropertyNames(input).indexOf('id') === -1) {
        result.id = input.id || input.jti;
        if (removeOriginalFields) {
            delete result.jti;
        }
    }
    var types = __spreadArray(__spreadArray([], __read(asArray(input.type))), __read(asArray((_c = input.vp) === null || _c === void 0 ? void 0 : _c.type))).filter(notEmpty);
    result.type = __spreadArray([], __read(new Set(types)));
    if (removeOriginalFields) {
        (_d = result.vp) === null || _d === void 0 ? true : delete _d.type;
    }
    var contexts = __spreadArray(__spreadArray(__spreadArray([], __read(asArray(input.context))), __read(asArray(input['@context']))), __read(asArray((_e = input.vp) === null || _e === void 0 ? void 0 : _e['@context']))).filter(notEmpty);
    result['@context'] = __spreadArray([], __read(new Set(contexts)));
    if (removeOriginalFields) {
        delete result.context;
        (_f = result.vp) === null || _f === void 0 ? true : delete _f['@context'];
    }
    if (!input.issuanceDate && (input.iat || input.nbf)) {
        result.issuanceDate = new Date((input.nbf || input.iat) * 1000).toISOString();
        if (removeOriginalFields) {
            if (input.nbf) {
                delete result.nbf;
            }
            else {
                delete result.iat;
            }
        }
    }
    if (!input.expirationDate && input.exp) {
        result.expirationDate = new Date(input.exp * 1000).toISOString();
        if (removeOriginalFields) {
            delete result.exp;
        }
    }
    if (result.vp && Object.keys(result.vp).length === 0) {
        if (removeOriginalFields) {
            delete result.vp;
        }
    }
    return result;
}
function normalizeJwtPresentation(input, removeOriginalFields) {
    if (removeOriginalFields === void 0) { removeOriginalFields = true; }
    var decoded;
    try {
        decoded = did_jwt_1.decodeJWT(input);
    }
    catch (e) {
        throw new TypeError('unknown presentation format');
    }
    return __assign(__assign({}, normalizeJwtPresentationPayload(decoded.payload, removeOriginalFields)), { proof: {
            type: constants_1.DEFAULT_JWT_PROOF_TYPE,
            jwt: input
        } });
}
/**
 * Normalizes a presentation payload into an unambiguous W3C Presentation data type
 * @param input either a JWT or JWT payload, or a VerifiablePresentation
 */
function normalizePresentation(input, removeOriginalFields) {
    var _a;
    if (removeOriginalFields === void 0) { removeOriginalFields = true; }
    if (typeof input === 'string') {
        if (constants_1.JWT_FORMAT.test(input)) {
            return normalizeJwtPresentation(input, removeOriginalFields);
        }
        else {
            var parsed = void 0;
            try {
                parsed = JSON.parse(input);
            }
            catch (e) {
                throw new TypeError('unknown presentation format');
            }
            return normalizePresentation(parsed, removeOriginalFields);
        }
    }
    else if ((_a = input.proof) === null || _a === void 0 ? void 0 : _a.jwt) {
        // TODO: test that it correctly propagates app specific proof properties
        return __assign(__assign({}, normalizeJwtPresentation(input.proof.jwt, removeOriginalFields)), { proof: input.proof });
    }
    else {
        // TODO: test that it accepts JWT payload, PresentationPayload, VerifiablePresentation
        // TODO: test that it correctly propagates proof, if any
        return __assign({ proof: {} }, normalizeJwtPresentationPayload(input, removeOriginalFields));
    }
}
exports.normalizePresentation = normalizePresentation;
/**
 * Transforms a W3C Presentation payload into a JWT compatible encoding.
 * The method accepts app specific fields and in case of collision, existing JWT properties will take precedence.
 * Also, `nbf`, `exp` and `jti` properties can be explicitly set to `undefined` and they will be kept intact.
 * @param input either a JWT payload or a CredentialPayloadInput
 */
function transformPresentationInput(input, removeOriginalFields) {
    var _a, _b, _c;
    if (removeOriginalFields === void 0) { removeOriginalFields = true; }
    var result = deepCopy(__assign({ vp: __assign({}, input.vp) }, input));
    var contextEntries = __spreadArray(__spreadArray(__spreadArray([], __read(asArray(input.context))), __read(asArray(input['@context']))), __read(asArray((_a = input.vp) === null || _a === void 0 ? void 0 : _a['@context']))).filter(notEmpty);
    result.vp['@context'] = __spreadArray([], __read(new Set(contextEntries)));
    if (removeOriginalFields) {
        delete result.context;
        delete result['@context'];
    }
    var types = __spreadArray(__spreadArray([], __read(asArray(input.type))), __read(asArray((_b = input.vp) === null || _b === void 0 ? void 0 : _b.type))).filter(notEmpty);
    result.vp.type = __spreadArray([], __read(new Set(types)));
    if (removeOriginalFields) {
        delete result.type;
    }
    if (input.id && Object.getOwnPropertyNames(input).indexOf('jti') === -1) {
        result.jti = input.id;
        if (removeOriginalFields) {
            delete result.id;
        }
    }
    if (input.issuanceDate && Object.getOwnPropertyNames(input).indexOf('nbf') === -1) {
        var converted = Date.parse(input.issuanceDate);
        if (!isNaN(converted)) {
            result.nbf = Math.floor(converted / 1000);
            if (removeOriginalFields) {
                delete result.issuanceDate;
            }
        }
    }
    if (input.expirationDate && Object.getOwnPropertyNames(input).indexOf('exp') === -1) {
        var converted = Date.parse(input.expirationDate);
        if (!isNaN(converted)) {
            result.exp = Math.floor(converted / 1000);
            if (removeOriginalFields) {
                delete result.expirationDate;
            }
        }
    }
    result.vp.verifiableCredential = __spreadArray(__spreadArray([], __read(asArray(result.verifiableCredential))), __read(asArray((_c = result.vp) === null || _c === void 0 ? void 0 : _c.verifiableCredential))).filter(notEmpty)
        .map(function (credential) {
        var _a;
        if (typeof credential === 'object' && ((_a = credential.proof) === null || _a === void 0 ? void 0 : _a.jwt)) {
            return credential.proof.jwt;
        }
        else {
            return credential;
        }
    });
    if (removeOriginalFields) {
        delete result.verifiableCredential;
    }
    if (input.holder && Object.getOwnPropertyNames(input).indexOf('iss') === -1) {
        if (typeof input.holder === 'string') {
            result.iss = input.holder;
            if (removeOriginalFields) {
                delete result.holder;
            }
        }
        else {
            // nop
        }
    }
    if (input.verifier) {
        var audience = __spreadArray(__spreadArray([], __read(asArray(input.verifier))), __read(asArray(input.aud))).filter(notEmpty);
        result.aud = __spreadArray([], __read(new Set(audience)));
        if (removeOriginalFields) {
            delete result.verifier;
        }
    }
    return result;
}
exports.transformPresentationInput = transformPresentationInput;
//# sourceMappingURL=converters.js.map