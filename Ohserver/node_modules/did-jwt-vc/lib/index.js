"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.verifyPresentation = exports.verifyPresentationPayloadOptions = exports.verifyCredential = exports.validatePresentationPayload = exports.validateJwtPresentationPayload = exports.validateCredentialPayload = exports.validateJwtCredentialPayload = exports.createVerifiablePresentationJwt = exports.createVerifiableCredentialJwt = exports.normalizePresentation = exports.normalizeCredential = exports.transformPresentationInput = exports.transformCredentialInput = void 0;
var did_jwt_1 = require("did-jwt");
var constants_1 = require("./constants");
var validators = __importStar(require("./validators"));
var converters_1 = require("./converters");
Object.defineProperty(exports, "transformCredentialInput", { enumerable: true, get: function () { return converters_1.transformCredentialInput; } });
Object.defineProperty(exports, "transformPresentationInput", { enumerable: true, get: function () { return converters_1.transformPresentationInput; } });
Object.defineProperty(exports, "normalizeCredential", { enumerable: true, get: function () { return converters_1.normalizeCredential; } });
Object.defineProperty(exports, "normalizePresentation", { enumerable: true, get: function () { return converters_1.normalizePresentation; } });
/**
 * Creates a VerifiableCredential given a `CredentialPayload` or `JwtCredentialPayload` and an `Issuer`.
 *
 * This method transforms the payload into the [JWT encoding](https://www.w3.org/TR/vc-data-model/#jwt-encoding)
 * described in the [W3C VC spec](https://www.w3.org/TR/vc-data-model) and then validated to conform to the minimum spec
 * required spec.
 *
 * The `issuer` is then used to assign an algorithm, override the `iss` field of the payload and then sign the JWT.
 *
 * @param payload `CredentialPayload` or `JwtCredentialPayload`
 * @param issuer `Issuer` the DID, signer and algorithm that will sign the token
 * @return a `Promise` that resolves to the JWT encoded verifiable credential or rejects with `TypeError` if the
 * `payload` is not W3C compliant
 */
function createVerifiableCredentialJwt(payload, issuer, options) {
    if (options === void 0) { options = {}; }
    return __awaiter(this, void 0, void 0, function () {
        var parsedPayload;
        return __generator(this, function (_a) {
            parsedPayload = __assign({ iat: undefined }, converters_1.transformCredentialInput(payload, options.removeOriginalFields));
            validateJwtCredentialPayload(parsedPayload);
            return [2 /*return*/, did_jwt_1.createJWT(parsedPayload, {
                    issuer: issuer.did || parsedPayload.iss,
                    signer: issuer.signer,
                    alg: issuer.alg || constants_1.JWT_ALG
                })];
        });
    });
}
exports.createVerifiableCredentialJwt = createVerifiableCredentialJwt;
/**
 * Creates a VerifiablePresentation JWT given a `PresentationPayload` or `JwtPresentationPayload` and an `Issuer`.
 *
 * This method transforms the payload into the [JWT encoding](https://www.w3.org/TR/vc-data-model/#jwt-encoding)
 * described in the [W3C VC spec](https://www.w3.org/TR/vc-data-model) and then validated to conform to the minimum spec
 * required spec.
 *
 * The `holder` is then used to assign an algorithm, override the `iss` field of the payload and then sign the JWT.
 *
 * @param payload `PresentationPayload` or `JwtPresentationPayload`
 * @param holder `Issuer` of the Presentation JWT (holder of the VC), signer and algorithm that will sign the token
 * @param options `CreatePresentationOptions` allows to pass additional values to the resulting JWT payload
 * @return a `Promise` that resolves to the JWT encoded verifiable presentation or rejects with `TypeError` if the
 * `payload` is not W3C compliant
 */
function createVerifiablePresentationJwt(payload, holder, options) {
    if (options === void 0) { options = {}; }
    return __awaiter(this, void 0, void 0, function () {
        var parsedPayload, audience;
        return __generator(this, function (_a) {
            parsedPayload = __assign({ iat: undefined }, converters_1.transformPresentationInput(payload, options === null || options === void 0 ? void 0 : options.removeOriginalFields));
            // add challenge to nonce
            if (options.challenge && Object.getOwnPropertyNames(parsedPayload).indexOf('nonce') === -1) {
                parsedPayload.nonce = options.challenge;
            }
            // add domain to audience.
            if (options.domain) {
                audience = __spreadArray(__spreadArray([], __read(converters_1.asArray(options.domain))), __read(converters_1.asArray(parsedPayload.aud))).filter(converters_1.notEmpty);
                parsedPayload.aud = __spreadArray([], __read(new Set(audience)));
            }
            validateJwtPresentationPayload(parsedPayload);
            return [2 /*return*/, did_jwt_1.createJWT(parsedPayload, {
                    issuer: holder.did || parsedPayload.iss,
                    signer: holder.signer,
                    alg: holder.alg || constants_1.JWT_ALG
                })];
        });
    });
}
exports.createVerifiablePresentationJwt = createVerifiablePresentationJwt;
function validateJwtCredentialPayload(payload) {
    validators.validateContext(payload.vc['@context']);
    validators.validateVcType(payload.vc.type);
    validators.validateCredentialSubject(payload.vc.credentialSubject);
    if (payload.nbf)
        validators.validateTimestamp(payload.nbf);
    if (payload.exp)
        validators.validateTimestamp(payload.exp);
}
exports.validateJwtCredentialPayload = validateJwtCredentialPayload;
function validateCredentialPayload(payload) {
    validators.validateContext(payload['@context']);
    validators.validateVcType(payload.type);
    validators.validateCredentialSubject(payload.credentialSubject);
    if (payload.issuanceDate)
        validators.validateTimestamp(payload.issuanceDate);
    if (payload.expirationDate)
        validators.validateTimestamp(payload.expirationDate);
}
exports.validateCredentialPayload = validateCredentialPayload;
function validateJwtPresentationPayload(payload) {
    var e_1, _a;
    validators.validateContext(payload.vp['@context']);
    validators.validateVpType(payload.vp.type);
    if (payload.vp.verifiableCredential.length < 1) {
        throw new TypeError('vp.verifiableCredential must not be empty');
    }
    try {
        for (var _b = __values(converters_1.asArray(payload.vp.verifiableCredential)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var vc = _c.value;
            if (typeof vc === 'string') {
                validators.validateJwtFormat(vc);
            }
            else {
                validateCredentialPayload(vc);
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    if (payload.exp)
        validators.validateTimestamp(payload.exp);
}
exports.validateJwtPresentationPayload = validateJwtPresentationPayload;
function validatePresentationPayload(payload) {
    var e_2, _a;
    validators.validateContext(payload['@context']);
    validators.validateVpType(payload.type);
    if (payload.verifiableCredential.length < 1) {
        throw new TypeError('vp.verifiableCredential must not be empty');
    }
    try {
        for (var _b = __values(payload.verifiableCredential), _c = _b.next(); !_c.done; _c = _b.next()) {
            var vc = _c.value;
            if (typeof vc === 'string') {
                validators.validateJwtFormat(vc);
            }
            else {
                validateCredentialPayload(vc);
            }
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_2) throw e_2.error; }
    }
    if (payload.expirationDate)
        validators.validateTimestamp(payload.expirationDate);
}
exports.validatePresentationPayload = validatePresentationPayload;
/**
 * Verifies and validates a VerifiableCredential that is encoded as a JWT according to the W3C spec.
 *
 * @return a `Promise` that resolves to a `VerifiedCredential` or rejects with `TypeError` if the input is not
 * W3C compliant
 * @param vc the credential to be verified. Currently only the JWT encoding is supported by this library
 * @param resolver a configured `Resolver` that can provide the DID document of the JWT issuer
 */
function verifyCredential(vc, resolver, options) {
    if (options === void 0) { options = {}; }
    return __awaiter(this, void 0, void 0, function () {
        var verified;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, did_jwt_1.verifyJWT(vc, __assign({ resolver: resolver }, options))];
                case 1:
                    verified = _a.sent();
                    verified.verifiableCredential = converters_1.normalizeCredential(verified.jwt, options === null || options === void 0 ? void 0 : options.removeOriginalFields);
                    validateCredentialPayload(verified.verifiableCredential);
                    return [2 /*return*/, verified];
            }
        });
    });
}
exports.verifyCredential = verifyCredential;
/**
 * Verifies that the given JwtPresentationPayload contains the appropriate options from VerifyPresentationOptions
 *
 * @param payload the JwtPresentationPayload to verify against
 * @param options the VerifyPresentationOptions that contain the optional values to verify.
 * @throws {Error} If VerifyPresentationOptions are not satisfied
 */
function verifyPresentationPayloadOptions(payload, options) {
    if (options.challenge && options.challenge !== payload.nonce) {
        throw new Error("Presentation does not contain the mandatory challenge (JWT: nonce) for : " + options.challenge);
    }
    if (options.domain) {
        // aud might be array
        var matchedAudience = void 0;
        if (payload.aud) {
            var audArray = Array.isArray(payload.aud) ? payload.aud : [payload.aud];
            matchedAudience = audArray.find(function (item) { return options.domain === item; });
        }
        if (typeof matchedAudience === 'undefined') {
            throw new Error("Presentation does not contain the mandatory domain (JWT: aud) for : " + options.domain);
        }
    }
}
exports.verifyPresentationPayloadOptions = verifyPresentationPayloadOptions;
/**
 * Verifies and validates a VerifiablePresentation that is encoded as a JWT according to the W3C spec.
 *
 * @return a `Promise` that resolves to a `VerifiedPresentation` or rejects with `TypeError` if the input is
 * not W3C compliant or the VerifyPresentationOptions are not satisfied.
 * @param presentation the presentation to be verified. Currently only the JWT encoding is supported by this library
 * @param resolver a configured `Resolver` that can provide the DID document of the JWT issuer (presentation holder)
 * @param options optional verification options that need to be satisfied
 */
function verifyPresentation(presentation, resolver, options) {
    if (options === void 0) { options = {}; }
    return __awaiter(this, void 0, void 0, function () {
        var verified;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, did_jwt_1.verifyJWT(presentation, __assign({ resolver: resolver }, options))];
                case 1:
                    verified = _a.sent();
                    verifyPresentationPayloadOptions(verified.payload, options);
                    verified.verifiablePresentation = converters_1.normalizePresentation(verified.jwt, options === null || options === void 0 ? void 0 : options.removeOriginalFields);
                    validatePresentationPayload(verified.verifiablePresentation);
                    return [2 /*return*/, verified];
            }
        });
    });
}
exports.verifyPresentation = verifyPresentation;
//# sourceMappingURL=index.js.map