{"version":3,"file":"index.esm.js","sources":["../src/util.ts","../src/Digest.ts","../src/signers/ES256KSigner.ts","../src/signers/SimpleSigner.ts","../src/signers/EllipticSigner.ts","../src/signers/EdDSASigner.ts","../src/signers/NaclSigner.ts","../src/VerifierAlgorithm.ts","../src/SignerAlgorithm.ts","../src/JWT.ts","../src/JWE.ts","../src/xc20pEncryption.ts"],"sourcesContent":["import * as u8a from 'uint8arrays'\n\n/**\n * @deprecated Signers will be expected to return base64url `string` signatures.\n */\nexport interface EcdsaSignature {\n  r: string\n  s: string\n  recoveryParam?: number\n}\n\nexport function bytesToBase64url(b: Uint8Array): string {\n  return u8a.toString(b, 'base64url')\n}\n\nexport function base64ToBytes(s: string): Uint8Array {\n  const inputBase64Url = s.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '')\n  return u8a.fromString(inputBase64Url, 'base64url')\n}\n\nexport function bytesToBase64(b: Uint8Array): string {\n  return u8a.toString(b, 'base64pad')\n}\n\nexport function base58ToBytes(s: string): Uint8Array {\n  return u8a.fromString(s, 'base58btc')\n}\n\nexport function hexToBytes(s: string): Uint8Array {\n  const input = s.startsWith('0x') ? s.substring(2) : s\n  return u8a.fromString(input.toLowerCase(), 'base16')\n}\n\nexport function encodeBase64url(s: string): string {\n  return bytesToBase64url(u8a.fromString(s))\n}\n\nexport function decodeBase64url(s: string): string {\n  return u8a.toString(base64ToBytes(s))\n}\n\nexport function bytesToHex(b: Uint8Array): string {\n  return u8a.toString(b, 'base16')\n}\n\nexport function stringToBytes(s: string): Uint8Array {\n  return u8a.fromString(s)\n}\n\nexport function toJose({ r, s, recoveryParam }: EcdsaSignature, recoverable?: boolean): string {\n  const jose = new Uint8Array(recoverable ? 65 : 64)\n  jose.set(u8a.fromString(r, 'base16'), 0)\n  jose.set(u8a.fromString(s, 'base16'), 32)\n  if (recoverable) {\n    if (recoveryParam === undefined) {\n      throw new Error('Signer did not return a recoveryParam')\n    }\n    jose[64] = recoveryParam\n  }\n  return bytesToBase64url(jose)\n}\n\nexport function fromJose(signature: string): { r: string; s: string; recoveryParam: number } {\n  const signatureBytes: Uint8Array = base64ToBytes(signature)\n  if (signatureBytes.length < 64 || signatureBytes.length > 65) {\n    throw new TypeError(`Wrong size for signature. Expected 64 or 65 bytes, but got ${signatureBytes.length}`)\n  }\n  const r = bytesToHex(signatureBytes.slice(0, 32))\n  const s = bytesToHex(signatureBytes.slice(32, 64))\n  const recoveryParam = signatureBytes.length === 65 ? signatureBytes[64] : undefined\n  return { r, s, recoveryParam }\n}\n\nexport function toSealed(ciphertext: string, tag: string): Uint8Array {\n  return u8a.concat([base64ToBytes(ciphertext), base64ToBytes(tag)])\n}\n\nconst hexMatcher = /^(0x)?([a-fA-F0-9]{64}|[a-fA-F0-9]{128})$/\nconst base58Matcher = /^([1-9A-HJ-NP-Za-km-z]{44}|[1-9A-HJ-NP-Za-km-z]{88})$/\nconst base64Matcher = /^([0-9a-zA-Z=\\-_\\+\\/]{43}|[0-9a-zA-Z=\\-_\\+\\/]{86})(={0,2})$/\n\n/**\n * Parses a private key and returns the Uint8Array representation.\n * This method uses an heuristic to determine the key encoding to then be able to parse it into 32 or 64 bytes.\n *\n * @param input a 32 or 64 byte key presented either as a Uint8Array or as a hex, base64, or base58btc encoded string\n *\n * @throws TypeError('Invalid private key format') if the key doesn't match any of the accepted formats or length\n */\nexport function parseKey(input: string | Uint8Array): Uint8Array {\n  if (typeof input === 'string') {\n    if (hexMatcher.test(input)) {\n      return hexToBytes(input)\n    } else if (base58Matcher.test(input)) {\n      return base58ToBytes(input)\n    } else if (base64Matcher.test(input)) {\n      return base64ToBytes(input)\n    } else {\n      throw TypeError('Invalid private key format')\n    }\n  } else if (input instanceof Uint8Array) {\n    return input\n  } else {\n    throw TypeError('Invalid private key format')\n  }\n}\n\nexport function leftpad(data: string, size = 64): string {\n  if (data.length === size) return data\n  return '0'.repeat(size - data.length) + data\n}\n","import { hash } from '@stablelib/sha256'\nimport * as u8a from 'uint8arrays'\nimport { keccak_256 } from 'js-sha3' // eslint-disable-line\n\nexport function sha256(payload: string | Uint8Array): Uint8Array {\n  const data = (typeof payload === 'string') ? u8a.fromString(payload) : payload\n  return hash(data)\n}\n\nexport function keccak(data: Uint8Array): Uint8Array {\n  return new Uint8Array(keccak_256.arrayBuffer(data))\n}\n\nexport function toEthereumAddress(hexPublicKey: string): string {\n  const hashInput = u8a.fromString(hexPublicKey.slice(2), 'base16')\n  return `0x${u8a.toString(keccak(hashInput).slice(-20), 'base16')}`\n}\n\nfunction writeUint32BE(value: number, array = new Uint8Array(4)): Uint8Array {\n  const encoded = u8a.fromString(value.toString(), 'base10')\n  array.set(encoded, 4 - encoded.length)\n  return array\n}\n\nconst lengthAndInput = (input: Uint8Array): Uint8Array => u8a.concat([writeUint32BE(input.length), input])\n\n// This implementation of concatKDF was inspired by these two implementations:\n// https://github.com/digitalbazaar/minimal-cipher/blob/master/algorithms/ecdhkdf.js\n// https://github.com/panva/jose/blob/master/lib/jwa/ecdh/derive.js\nexport function concatKDF(secret: Uint8Array, keyLen: number, alg: string): Uint8Array {\n  if (keyLen !== 256) throw new Error(`Unsupported key length: ${keyLen}`)\n  const value = u8a.concat([\n    lengthAndInput(u8a.fromString(alg)),\n    lengthAndInput(new Uint8Array(0)), // apu\n    lengthAndInput(new Uint8Array(0)), // apv\n    writeUint32BE(keyLen)\n  ])\n  // since our key lenght is 256 we only have to do one round\n  const roundNumber = 1\n  return hash(u8a.concat([ writeUint32BE(roundNumber), secret, value ]))\n}\n","import { parseKey, leftpad } from '../util'\nimport { toJose } from '../util'\nimport { Signer } from '../JWT'\nimport { sha256 } from '../Digest'\n\nimport { ec as EC, ec } from 'elliptic'\nconst secp256k1: EC = new EC('secp256k1')\n\n/**\n *  Creates a configured signer function for signing data using the ES256K (secp256k1 + sha256) algorithm.\n *\n *  The signing function itself takes the data as a `Uint8Array` or `string` and returns a `base64Url`-encoded signature\n *\n *  @example\n *  ```typescript\n *  const sign: Signer = ES256KSigner(process.env.PRIVATE_KEY)\n *  const signature: string = await sign(data)\n *  ```\n *\n *  @param    {String}    privateKey   a private key as `Uint8Array` or encoded as `base64`, `base58`, or `hex` string\n *  @param    {Boolean}   recoverable  an optional flag to add the recovery param to the generated signatures\n *  @return   {Function}               a configured signer function `(data: string | Uint8Array): Promise<string>`\n */\nexport function ES256KSigner(privateKey: string | Uint8Array, recoverable: boolean = false): Signer {\n  const privateKeyBytes: Uint8Array = parseKey(privateKey)\n  if (privateKeyBytes.length !== 32) {\n    throw new Error(`Invalid private key format. Expecting 32 bytes, but got ${privateKeyBytes.length}`)\n  }\n  const keyPair: ec.KeyPair = secp256k1.keyFromPrivate(privateKeyBytes)\n\n  return async (data: string | Uint8Array): Promise<string> => {\n    const { r, s, recoveryParam }: EC.Signature = keyPair.sign(sha256(data))\n    return toJose(\n      {\n        r: leftpad(r.toString('hex')),\n        s: leftpad(s.toString('hex')),\n        recoveryParam\n      },\n      recoverable\n    )\n  }\n}\n","import { fromJose } from '../util'\nimport { Signer } from '../JWT'\nimport { ES256KSigner } from './ES256KSigner'\n\n/**\n * @deprecated Please use ES256KSigner\n *  The SimpleSigner returns a configured function for signing data.\n *\n *  @example\n *  const signer = SimpleSigner(process.env.PRIVATE_KEY)\n *  signer(data, (err, signature) => {\n *    ...\n *  })\n *\n *  @param    {String}         hexPrivateKey    a hex encoded private key\n *  @return   {Function}                     a configured signer function\n */\nfunction SimpleSigner(hexPrivateKey: string): Signer {\n  const signer = ES256KSigner(hexPrivateKey, true)\n  return async (data) => {\n    const signature = (await signer(data)) as string\n    return fromJose(signature)\n  }\n}\n\nexport default SimpleSigner\n","import { Signer } from '../JWT'\nimport { ES256KSigner } from './ES256KSigner'\n\n/**\n * @deprecated Please use ES256KSigner\n *  The EllipticSigner returns a configured function for signing data.\n *\n *  @example\n *  ```typescript\n *  const signer = EllipticSigner(process.env.PRIVATE_KEY)\n *  signer(data).then( (signature: string) => {\n *    ...\n *  })\n *  ```\n * \n *  @param    {String}         hexPrivateKey    a hex encoded private key\n *  @return   {Function}                        a configured signer function\n */\nfunction EllipticSigner(hexPrivateKey: string): Signer {\n  return ES256KSigner(hexPrivateKey)\n}\n\nexport default EllipticSigner\n","import { sign } from '@stablelib/ed25519'\nimport { Signer } from '../JWT'\nimport { bytesToBase64url, parseKey, stringToBytes } from '../util'\n\n/**\n *  Creates a configured signer function for signing data using the EdDSA (Ed25519) algorithm.\n *\n *  The signing function itself takes the data as a `Uint8Array` or `string` and returns a `base64Url`-encoded signature\n *\n *  @example\n *  ```typescript\n *  const sign: Signer = EdDSASigner(process.env.PRIVATE_KEY)\n *  const signature: string = await sign(data)\n *  ```\n *\n *  @param    {String}    secretKey   a 64 byte secret key as `Uint8Array` or encoded as `base64`, `base58`, or `hex` string\n *  @return   {Function}              a configured signer function `(data: string | Uint8Array): Promise<string>`\n */\nexport function EdDSASigner(secretKey: string | Uint8Array): Signer {\n  const privateKeyBytes: Uint8Array = parseKey(secretKey)\n  if (privateKeyBytes.length !== 64) {\n    throw new Error(`Invalid private key format. Expecting 64 bytes, but got ${privateKeyBytes.length}`)\n  }\n  return async (data: string | Uint8Array): Promise<string> => {\n    const dataBytes: Uint8Array = (typeof data === 'string') ? stringToBytes(data) : data\n    const sig: Uint8Array = sign(privateKeyBytes, dataBytes)\n    return bytesToBase64url(sig)\n  }\n}\n","import { sign } from '@stablelib/ed25519'\nimport { EdDSASigner as EdDSASigner } from './EdDSASigner'\nimport { Signer } from '../JWT'\nimport { base64ToBytes, bytesToBase64url, stringToBytes } from '../util'\n\n/**\n * @deprecated Please use EdDSASigner\n * \n *  The NaclSigner returns a configured function for signing data using the Ed25519 algorithm.\n *\n *  The signing function itself takes the data as a `string` or `Uint8Array` parameter and returns a `base64Url`-encoded signature.\n *\n *  @example\n *  const signer = NaclSigner(process.env.PRIVATE_KEY)\n *  const data: string = '...'\n *  signer(data).then( (signature: string) => {\n *    ...\n *  })\n *\n *  @param    {String}   base64PrivateKey    a 64 byte base64 encoded private key\n *  @return   {Function}                     a configured signer function\n */\n\nfunction NaclSigner(base64PrivateKey: string): Signer {\n  return EdDSASigner(base64PrivateKey)\n}\n\nexport default NaclSigner\n","import { ec as EC } from 'elliptic'\nimport { sha256, toEthereumAddress } from './Digest'\nimport { verify } from '@stablelib/ed25519'\nimport { PublicKey } from 'did-resolver'\nimport { hexToBytes, base58ToBytes, base64ToBytes, bytesToHex, EcdsaSignature, stringToBytes } from './util'\n\nconst secp256k1 = new EC('secp256k1')\n\n// converts a JOSE signature to it's components\nexport function toSignatureObject(signature: string, recoverable = false): EcdsaSignature {\n  const rawsig: Uint8Array = base64ToBytes(signature)\n  if (rawsig.length !== (recoverable ? 65 : 64)) {\n    throw new Error('wrong signature length')\n  }\n  const r: string = bytesToHex(rawsig.slice(0, 32))\n  const s: string = bytesToHex(rawsig.slice(32, 64))\n  const sigObj: EcdsaSignature = { r, s }\n  if (recoverable) {\n    sigObj.recoveryParam = rawsig[64]\n  }\n  return sigObj\n}\n\nfunction extractPublicKeyBytes(pk: PublicKey): Uint8Array {\n  if (pk.publicKeyBase58) {\n    return base58ToBytes(pk.publicKeyBase58)\n  } else if (pk.publicKeyBase64) {\n    return base64ToBytes(pk.publicKeyBase64)\n  } else if (pk.publicKeyHex) {\n    return hexToBytes(pk.publicKeyHex)\n  }\n  return new Uint8Array()\n}\n\nexport function verifyES256K(data: string, signature: string, authenticators: PublicKey[]): PublicKey {\n  const hash: Uint8Array = sha256(data)\n  const sigObj: EcdsaSignature = toSignatureObject(signature)\n  const fullPublicKeys = authenticators.filter(({ ethereumAddress }) => {\n    return typeof ethereumAddress === 'undefined'\n  })\n  const ethAddressKeys = authenticators.filter(({ ethereumAddress }) => {\n    return typeof ethereumAddress !== 'undefined'\n  })\n\n  let signer: PublicKey = fullPublicKeys.find((pk: PublicKey) => {\n    try {\n      const pubBytes = extractPublicKeyBytes(pk)\n      return secp256k1.keyFromPublic(pubBytes).verify(hash, sigObj)\n    } catch (err) {\n      return false\n    }\n  })\n\n  if (!signer && ethAddressKeys.length > 0) {\n    signer = verifyRecoverableES256K(data, signature, ethAddressKeys)\n  }\n\n  if (!signer) throw new Error('Signature invalid for JWT')\n  return signer\n}\n\nexport function verifyRecoverableES256K(data: string, signature: string, authenticators: PublicKey[]): PublicKey {\n  let signatures: EcdsaSignature[]\n  if (signature.length > 86) {\n    signatures = [toSignatureObject(signature, true)]\n  } else {\n    const so = toSignatureObject(signature, false)\n    signatures = [\n      { ...so, recoveryParam: 0 },\n      { ...so, recoveryParam: 1 }\n    ]\n  }\n\n  const checkSignatureAgainstSigner = (sigObj: EcdsaSignature): PublicKey => {\n    const hash: Uint8Array = sha256(data)\n    const recoveredKey: any = secp256k1.recoverPubKey(hash, sigObj, sigObj.recoveryParam)\n    const recoveredPublicKeyHex: string = recoveredKey.encode('hex')\n    const recoveredCompressedPublicKeyHex: string = recoveredKey.encode('hex', true)\n    const recoveredAddress: string = toEthereumAddress(recoveredPublicKeyHex)\n\n    const signer: PublicKey = authenticators.find(\n      ({ publicKeyHex, ethereumAddress }) =>\n        publicKeyHex === recoveredPublicKeyHex ||\n        publicKeyHex === recoveredCompressedPublicKeyHex ||\n        ethereumAddress === recoveredAddress\n    )\n\n    return signer\n  }\n\n  const signer: PublicKey[] = signatures.map(checkSignatureAgainstSigner).filter(key => key != null)\n\n  if (signer.length === 0) throw new Error('Signature invalid for JWT')\n  return signer[0]\n}\n\nexport function verifyEd25519(data: string, signature: string, authenticators: PublicKey[]): PublicKey {\n  const clear: Uint8Array = stringToBytes(data)\n  const sig: Uint8Array = base64ToBytes(signature)\n  const signer: PublicKey = authenticators.find((pk: PublicKey) => {\n    return verify(extractPublicKeyBytes(pk), clear, sig)\n  }\n  )\n  if (!signer) throw new Error('Signature invalid for JWT')\n  return signer\n}\n\ntype Verifier = (data: string, signature: string, authenticators: PublicKey[]) => PublicKey\ninterface Algorithms {\n  [name: string]: Verifier\n}\nconst algorithms: Algorithms = {\n  ES256K: verifyES256K,\n  // This is a non-standard algorithm but retained for backwards compatibility\n  // see https://github.com/decentralized-identity/did-jwt/issues/146\n  'ES256K-R': verifyRecoverableES256K,\n  // This is actually incorrect but retained for backwards compatibility\n  // see https://github.com/decentralized-identity/did-jwt/issues/130\n  Ed25519: verifyEd25519,\n  EdDSA: verifyEd25519\n}\n\nfunction VerifierAlgorithm(alg: string): Verifier {\n  const impl: Verifier = algorithms[alg]\n  if (!impl) throw new Error(`Unsupported algorithm ${alg}`)\n  return impl\n}\n\nVerifierAlgorithm.toSignatureObject = toSignatureObject\n\nexport default VerifierAlgorithm\n","import { Signer, SignerAlgorithm } from './JWT'\nimport { EcdsaSignature, fromJose, toJose } from './util'\n\nfunction instanceOfEcdsaSignature(object: any): object is EcdsaSignature {\n  return typeof object === 'object' && 'r' in object && 's' in object\n}\n\nexport function ES256KSignerAlg(recoverable?: boolean): SignerAlgorithm {\n  return async function sign(payload: string, signer: Signer): Promise<string> {\n    const signature: EcdsaSignature | string = await signer(payload)\n    if (instanceOfEcdsaSignature(signature)) {\n      return toJose(signature, recoverable)\n    } else {\n      if (recoverable && typeof fromJose(signature).recoveryParam === 'undefined') throw new Error(`ES256K-R not supported when signer doesn't provide a recovery param`)\n      return signature\n    }\n  }\n}\n\nexport function Ed25519SignerAlg(): SignerAlgorithm {\n  return async function sign(payload: string, signer: Signer): Promise<string> {\n    const signature: EcdsaSignature | string = await signer(payload)\n    if (!instanceOfEcdsaSignature(signature)) {\n      return signature\n    } else {\n      throw new Error('expected a signer function that returns a string instead of signature object')\n    }\n  }\n}\n\ninterface SignerAlgorithms {\n  [alg: string]: SignerAlgorithm\n}\n\nconst algorithms: SignerAlgorithms = {\n  ES256K: ES256KSignerAlg(),\n  // This is a non-standard algorithm but retained for backwards compatibility\n  // see https://github.com/decentralized-identity/did-jwt/issues/146\n  'ES256K-R': ES256KSignerAlg(true),\n  // This is actually incorrect but retained for backwards compatibility\n  // see https://github.com/decentralized-identity/did-jwt/issues/130\n  Ed25519: Ed25519SignerAlg(),\n  EdDSA: Ed25519SignerAlg()\n}\n\nfunction SignerAlgorithm(alg: string): SignerAlgorithm {\n  const impl: SignerAlgorithm = algorithms[alg]\n  if (!impl) throw new Error(`Unsupported algorithm ${alg}`)\n  return impl\n}\n\nexport default SignerAlgorithm\n","import VerifierAlgorithm from './VerifierAlgorithm'\nimport SignerAlgorithm from './SignerAlgorithm'\nimport { encodeBase64url, decodeBase64url, EcdsaSignature } from './util'\nimport { DIDDocument, PublicKey, Authentication } from 'did-resolver'\n\nexport type Signer = (data: string | Uint8Array) => Promise<EcdsaSignature | string>\nexport type SignerAlgorithm = (payload: string, signer: Signer) => Promise<string>\n\nexport interface JWTOptions {\n  issuer: string\n  signer: Signer\n  /**\n   * @deprecated Please use `header.alg` to specify the JWT algorithm.\n   */\n  alg?: string\n  expiresIn?: number\n}\n\nexport interface Resolvable {\n  resolve: (did: string) => Promise<DIDDocument | null>\n}\n\nexport interface JWTVerifyOptions {\n  auth?: boolean\n  audience?: string\n  callbackUrl?: string\n  resolver?: Resolvable\n  skewTime?: number\n}\n\nexport interface DIDAuthenticator {\n  authenticators: PublicKey[]\n  issuer: string\n  doc: DIDDocument\n}\n\nexport interface JWTHeader {\n  typ: 'JWT'\n  alg: string\n  [x: string]: any\n}\n\nexport interface JWTPayload {\n  iss?: string\n  sub?: string\n  aud?: string | string[]\n  iat?: number\n  nbf?: number\n  type?: string\n  exp?: number\n  rexp?: number\n  [x: string]: any\n}\n\nexport interface JWTDecoded {\n  header: JWTHeader\n  payload: JWTPayload\n  signature: string\n  data: string\n}\n\nexport interface JWSDecoded {\n  header: JWTHeader\n  payload: string\n  signature: string\n  data: string\n}\n\nexport interface JWTVerified {\n  payload: any\n  doc: DIDDocument\n  issuer: string\n  signer: object\n  jwt: string\n}\n\nexport interface PublicKeyTypes {\n  [name: string]: string[]\n}\nexport const SUPPORTED_PUBLIC_KEY_TYPES: PublicKeyTypes = {\n  ES256K: [\n    'Secp256k1VerificationKey2018',\n    'Secp256k1SignatureVerificationKey2018',\n    'EcdsaPublicKeySecp256k1',\n    'EcdsaSecp256k1VerificationKey2019'\n  ],\n  'ES256K-R': [\n    'Secp256k1VerificationKey2018',\n    'Secp256k1SignatureVerificationKey2018',\n    'EcdsaPublicKeySecp256k1',\n    'EcdsaSecp256k1VerificationKey2019'\n  ],\n  Ed25519: ['ED25519SignatureVerification', 'Ed25519VerificationKey2018'],\n  EdDSA: ['ED25519SignatureVerification', 'Ed25519VerificationKey2018']\n}\n\nconst defaultAlg = 'ES256K'\n\nfunction encodeSection(data: any): string {\n  return encodeBase64url(JSON.stringify(data))\n}\n\nexport const NBF_SKEW: number = 300\n\nfunction decodeJWS(jws: string): JWSDecoded {\n  const parts: RegExpMatchArray = jws.match(/^([a-zA-Z0-9_-]+)\\.([a-zA-Z0-9_-]+)\\.([a-zA-Z0-9_-]+)$/)\n  if (parts) {\n    return {\n      header: JSON.parse(decodeBase64url(parts[1])),\n      payload: parts[2],\n      signature: parts[3],\n      data: `${parts[1]}.${parts[2]}`\n    }\n  }\n  throw new Error('Incorrect format JWS')\n}\n\n/**  @module did-jwt/JWT */\n\n/**\n *  Decodes a JWT and returns an object representing the payload\n *\n *  @example\n *  decodeJWT('eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJpYXQiOjE1...')\n *\n *  @param    {String}            jwt                a JSON Web Token to verify\n *  @return   {Object}                               a JS object representing the decoded JWT\n */\nexport function decodeJWT(jwt: string): JWTDecoded {\n  if (!jwt) throw new Error('no JWT passed into decodeJWT')\n  try {\n    const jws = decodeJWS(jwt)\n    const decodedJwt: JWTDecoded = Object.assign(jws, { payload: JSON.parse(decodeBase64url(jws.payload)) })\n    return decodedJwt\n  } catch (e) {\n    throw new Error('Incorrect format JWT')\n  }\n}\n\n/**\n *  Creates a signed JWS given a payload, a signer, and an optional header.\n *\n *  @example\n *  const signer = ES256KSigner(process.env.PRIVATE_KEY)\n *  const jws = await createJWS({ my: 'payload' }, signer)\n *\n *  @param    {Object}            payload           payload object\n *  @param    {Signer}            signer            a signer, see `ES256KSigner or `EdDSASigner`\n *  @param    {Object}            header            optional object to specify or customize the JWS header\n *  @return   {Promise<Object, Error>}              a promise which resolves with a JWS string or rejects with an error\n */\nexport async function createJWS(\n  payload: string | any,\n  signer: Signer,\n  header: Partial<JWTHeader> = {}\n): Promise<string> {\n  if (!header.alg) header.alg = defaultAlg\n  const encodedPayload = typeof payload === 'string' ? payload : encodeSection(payload)\n  const signingInput: string = [encodeSection(header), encodedPayload].join('.')\n\n  const jwtSigner: SignerAlgorithm = SignerAlgorithm(header.alg)\n  const signature: string = await jwtSigner(signingInput, signer)\n  return [signingInput, signature].join('.')\n}\n\n/**\n *  Creates a signed JWT given an address which becomes the issuer, a signer, and a payload for which the signature is over.\n *\n *  @example\n *  const signer = ES256KSigner(process.env.PRIVATE_KEY)\n *  createJWT({address: '5A8bRWU3F7j3REx3vkJ...', signer}, {key1: 'value', key2: ..., ... }).then(jwt => {\n *      ...\n *  })\n *\n *  @param    {Object}            payload            payload object\n *  @param    {Object}            [options]          an unsigned credential object\n *  @param    {String}            options.issuer     The DID of the issuer (signer) of JWT\n *  @param    {String}            options.alg        [DEPRECATED] The JWT signing algorithm to use. Supports: [ES256K, ES256K-R, Ed25519, EdDSA], Defaults to: ES256K.\n *                                                   Please use `header.alg` to specify the algorithm\n *  @param    {Signer}            options.signer     a `Signer` function, Please see `ES256KSigner` or `EdDSASigner`\n *  @param    {Object}            header             optional object to specify or customize the JWT header\n *  @return   {Promise<Object, Error>}               a promise which resolves with a signed JSON Web Token or rejects with an error\n */\nexport async function createJWT(\n  payload: any,\n  { issuer, signer, alg, expiresIn }: JWTOptions,\n  header: Partial<JWTHeader> = {}\n): Promise<string> {\n  if (!signer) throw new Error('No Signer functionality has been configured')\n  if (!issuer) throw new Error('No issuing DID has been configured')\n  if (!header.typ) header.typ = 'JWT'\n  if (!header.alg) header.alg = alg\n  const timestamps: Partial<JWTPayload> = {\n    iat: Math.floor(Date.now() / 1000),\n    exp: undefined\n  }\n  if (expiresIn) {\n    if (typeof expiresIn === 'number') {\n      timestamps.exp = (payload.nbf || timestamps.iat) + Math.floor(expiresIn)\n    } else {\n      throw new Error('JWT expiresIn is not a number')\n    }\n  }\n  const fullPayload = { ...timestamps, ...payload, iss: issuer }\n  return createJWS(fullPayload, signer, header)\n}\n\nfunction verifyJWSDecoded({ header, data, signature }: JWSDecoded, pubkeys: PublicKey | PublicKey[]): PublicKey {\n  if (!Array.isArray(pubkeys)) pubkeys = [pubkeys]\n  const signer: PublicKey = VerifierAlgorithm(header.alg)(data, signature, pubkeys)\n  return signer\n}\n\n/**\n *  Verifies given JWS. If the JWS is valid, returns the public key that was\n *  used to sign the JWS, or throws an `Error` if none of the `pubkeys` match.\n *\n *  @example\n *  const pubkey = verifyJWT('eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJyZXF1Z....', { publicKeyHex: '0x12341...' })\n *\n *  @param    {String}                          jws         A JWS string to verify\n *  @param    {Array<PublicKey> | PublicKey}    pubkeys     The public keys used to verify the JWS\n *  @return   {PublicKey}                       The public key used to sign the JWS\n */\nexport function verifyJWS(jws: string, pubkeys: PublicKey | PublicKey[]): PublicKey {\n  const jwsDecoded: JWSDecoded = decodeJWS(jws)\n  return verifyJWSDecoded(jwsDecoded, pubkeys)\n}\n\n/**\n *  Verifies given JWT. If the JWT is valid, the promise returns an object including the JWT, the payload of the JWT,\n *  and the did doc of the issuer of the JWT.\n *\n *  @example\n *  verifyJWT('did:uport:eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJyZXF1Z....', {audience: '5A8bRWU3F7j3REx3vkJ...', callbackUrl: 'https://...'}).then(obj => {\n *      const did = obj.did // DID of signer\n *      const payload = obj.payload\n *      const doc = obj.doc // DID Document of signer\n *      const jwt = obj.jwt\n *      const signerKeyId = obj.signerKeyId // ID of key in DID document that signed JWT\n *      ...\n *  })\n *\n *  @param    {String}            jwt                a JSON Web Token to verify\n *  @param    {Object}            [options]           an unsigned credential object\n *  @param    {Boolean}           options.auth        Require signer to be listed in the authentication section of the DID document (for Authentication purposes)\n *  @param    {String}            options.audience    DID of the recipient of the JWT\n *  @param    {String}            options.callbackUrl callback url in JWT\n *  @return   {Promise<Object, Error>}               a promise which resolves with a response object or rejects with an error\n */\nexport async function verifyJWT(\n  jwt: string,\n  options: JWTVerifyOptions = {\n    resolver: null,\n    auth: null,\n    audience: null,\n    callbackUrl: null,\n    skewTime: null\n  }\n): Promise<JWTVerified> {\n  if (!options.resolver) throw new Error('No DID resolver has been configured')\n  const { payload, header, signature, data }: JWTDecoded = decodeJWT(jwt)\n  const { doc, authenticators, issuer }: DIDAuthenticator = await resolveAuthenticator(\n    options.resolver,\n    header.alg,\n    payload.iss,\n    options.auth\n  )\n  const signer: PublicKey = await verifyJWSDecoded({ header, data, signature } as JWSDecoded, authenticators)\n  const now: number = Math.floor(Date.now() / 1000)\n  const skewTime = options.skewTime >= 0 ? options.skewTime : NBF_SKEW\n  if (signer) {\n    const nowSkewed = now + skewTime\n    if (payload.nbf) {\n      if (payload.nbf > nowSkewed) {\n        throw new Error(`JWT not valid before nbf: ${payload.nbf}`)\n      }\n    } else if (payload.iat && payload.iat > nowSkewed) {\n      throw new Error(`JWT not valid yet (issued in the future) iat: ${payload.iat}`)\n    }\n    if (payload.exp && payload.exp <= now - skewTime) {\n      throw new Error(`JWT has expired: exp: ${payload.exp} < now: ${now}`)\n    }\n    if (payload.aud) {\n      if (!options.audience && !options.callbackUrl) {\n        throw new Error('JWT audience is required but your app address has not been configured')\n      }\n      const audArray = Array.isArray(payload.aud) ? payload.aud : [payload.aud]\n      const matchedAudience = audArray.find((item) => options.audience === item || options.callbackUrl === item)\n\n      if (typeof matchedAudience === 'undefined') {\n        throw new Error(`JWT audience does not match your DID or callback url`)\n      }\n    }\n    return { payload, doc, issuer, signer, jwt }\n  }\n}\n\n/**\n * Resolves relevant public keys or other authenticating material used to verify signature from the DID document of provided DID\n *\n *  @example\n *  resolveAuthenticator(resolver, 'ES256K', 'did:uport:2nQtiQG6Cgm1GYTBaaKAgr76uY7iSexUkqX').then(obj => {\n *      const payload = obj.payload\n *      const profile = obj.profile\n *      const jwt = obj.jwt\n *      ...\n *  })\n *\n *  @param    {String}            alg                a JWT algorithm\n *  @param    {String}            did                a Decentralized IDentifier (DID) to lookup\n *  @param    {Boolean}           auth               Restrict public keys to ones specifically listed in the 'authentication' section of DID document\n *  @return   {Promise<Object, Error>}               a promise which resolves with a response object containing an array of authenticators or if non exist rejects with an error\n */\nexport async function resolveAuthenticator(\n  resolver: Resolvable,\n  alg: string,\n  issuer: string,\n  auth?: boolean\n): Promise<DIDAuthenticator> {\n  const types: string[] = SUPPORTED_PUBLIC_KEY_TYPES[alg]\n  if (!types || types.length === 0) {\n    throw new Error(`No supported signature types for algorithm ${alg}`)\n  }\n  const doc: DIDDocument = await resolver.resolve(issuer)\n  if (!doc) throw new Error(`Unable to resolve DID document for ${issuer}`)\n\n  const getPublicKeyById = (doc: DIDDocument, pubid: string): PublicKey | null => {\n    const filtered = doc.publicKey.filter(({ id }) => pubid === id)\n    return filtered.length > 0 ? filtered[0] : null\n  }\n\n  let publicKeysToCheck: PublicKey[] = doc.publicKey || []\n  if (auth) {\n    publicKeysToCheck = (doc.authentication || [])\n      .map((authEntry) => {\n        if (typeof authEntry === 'string') {\n          return getPublicKeyById(doc, authEntry)\n        } else if (typeof (<Authentication>authEntry).publicKey === 'string') {\n          return getPublicKeyById(doc, (<Authentication>authEntry).publicKey)\n        } else {\n          return <PublicKey>authEntry\n        }\n      })\n      .filter((key) => key != null)\n  }\n\n  const authenticators: PublicKey[] = publicKeysToCheck.filter(({ type }) =>\n    types.find((supported) => supported === type)\n  )\n\n  if (auth && (!authenticators || authenticators.length === 0)) {\n    throw new Error(`DID document for ${issuer} does not have public keys suitable for authenticating user`)\n  }\n  if (!authenticators || authenticators.length === 0) {\n    throw new Error(`DID document for ${issuer} does not have public keys for ${alg}`)\n  }\n  return { authenticators, issuer, doc }\n}\n","import { base64ToBytes, bytesToBase64url, decodeBase64url, toSealed } from './util'\n\ninterface RecipientHeader {\n  alg: string\n  iv: string\n  tag: string\n  epk?: Record<string, any> // Ephemeral  Public Key\n  kid?: string\n}\n\nexport interface Recipient {\n  header: RecipientHeader\n  encrypted_key: string\n}\n\nexport interface JWE {\n  protected: string\n  iv: string\n  ciphertext: string\n  tag: string\n  aad?: string\n  recipients?: Recipient[]\n}\n\nexport interface EncryptionResult {\n  ciphertext: Uint8Array\n  tag: Uint8Array\n  iv: Uint8Array\n  protectedHeader?: string\n  recipient?: Recipient\n  cek?: Uint8Array\n}\n\nexport interface Encrypter {\n  alg: string\n  enc: string\n  encrypt: (cleartext: Uint8Array, protectedHeader: Record<string, any>, aad?: Uint8Array) => Promise<EncryptionResult>\n  encryptCek?: (cek: Uint8Array) => Promise<Recipient>\n}\n\nexport interface Decrypter {\n  alg: string\n  enc: string\n  decrypt: (sealed: Uint8Array, iv: Uint8Array, aad?: Uint8Array, recipient?: Record<string, any>) => Promise<Uint8Array>\n}\n\nfunction validateJWE(jwe: JWE) {\n  if (!(jwe.protected && jwe.iv && jwe.ciphertext && jwe.tag)) {\n    throw new Error('Invalid JWE')\n  }\n  if (jwe.recipients) {\n    jwe.recipients.map(rec => {\n      if (!(rec.header && rec.encrypted_key)) {\n        throw new Error('Invalid JWE')\n      }\n    })\n  }\n}\n\nfunction encodeJWE(\n  {\n    ciphertext,\n    tag,\n    iv,\n    protectedHeader,\n    recipient\n  }: EncryptionResult,\n  aad?: Uint8Array\n): JWE {\n  const jwe: JWE = {\n    protected: protectedHeader,\n    iv: bytesToBase64url(iv),\n    ciphertext: bytesToBase64url(ciphertext),\n    tag: bytesToBase64url(tag)\n  }\n  if (aad) jwe.aad = bytesToBase64url(aad)\n  if (recipient) jwe.recipients = [recipient]\n  return jwe\n}\n\nexport async function createJWE(cleartext: Uint8Array, encrypters: Encrypter[], protectedHeader = {}, aad?: Uint8Array): Promise<JWE> {\n  if (encrypters[0].alg === 'dir') {\n    if (encrypters.length > 1) throw new Error('Can only do \"dir\" encryption to one key.')\n    const encryptionResult = await encrypters[0].encrypt(cleartext, protectedHeader, aad)\n    return encodeJWE(encryptionResult, aad)\n  } else {\n    const tmpEnc = encrypters[0].enc\n    if (!encrypters.reduce((acc, encrypter) => acc && encrypter.enc === tmpEnc, true)) {\n      throw new Error('Incompatible encrypters passed')\n    }\n    let cek\n    let jwe\n    for (const encrypter of encrypters) {\n      if (!cek) {\n        const encryptionResult = await encrypter.encrypt(cleartext, protectedHeader, aad)\n        cek = encryptionResult.cek\n        jwe = encodeJWE(encryptionResult, aad)\n      } else {\n        jwe.recipients.push(await encrypter.encryptCek(cek))\n      }\n    }\n    return jwe\n  }\n}\n\nexport async function decryptJWE(jwe: JWE, decrypter: Decrypter): Promise<Uint8Array> {\n  validateJWE(jwe)\n  const protHeader = JSON.parse(decodeBase64url(jwe.protected))\n  if (protHeader.enc !== decrypter.enc) throw new Error(`Decrypter does not support: '${protHeader.enc}'`)\n  const sealed = toSealed(jwe.ciphertext, jwe.tag)\n  const aad = new Uint8Array(Buffer.from(jwe.aad ? `${jwe.protected}.${jwe.aad}` : jwe.protected))\n  let cleartext = null\n  if (protHeader.alg === 'dir' && decrypter.alg === 'dir') {\n    cleartext = await decrypter.decrypt(sealed, base64ToBytes(jwe.iv), aad)\n  } else if (!jwe.recipients || jwe.recipients.length === 0) {\n    throw new Error('Invalid JWE')\n  } else {\n    for (let i = 0; !cleartext && i < jwe.recipients.length; i++) {\n      const recipient = jwe.recipients[i]\n      Object.assign(recipient.header, protHeader)\n      if (recipient.header.alg === decrypter.alg) {\n        cleartext = await decrypter.decrypt(sealed, base64ToBytes(jwe.iv), aad, recipient)\n      }\n    }\n  }\n  if (cleartext === null) throw new Error('Failed to decrypt')\n  return cleartext\n}\n","import { XChaCha20Poly1305 } from '@stablelib/xchacha20poly1305'\nimport { generateKeyPair, sharedKey } from '@stablelib/x25519'\nimport { randomBytes } from '@stablelib/random'\nimport { concatKDF } from './Digest'\nimport { bytesToBase64url, base58ToBytes, encodeBase64url, toSealed, base64ToBytes } from './util'\nimport { Recipient, EncryptionResult, Encrypter, Decrypter } from './JWE'\nimport type { PublicKey, Resolver } from 'did-resolver'\n\nfunction xc20pEncrypter(key: Uint8Array): (cleartext: Uint8Array, aad?: Uint8Array) => EncryptionResult {\n  const cipher = new XChaCha20Poly1305(key)\n  return (cleartext: Uint8Array, aad?: Uint8Array) => {\n    const iv = randomBytes(cipher.nonceLength)\n    const sealed = cipher.seal(iv, cleartext, aad)\n    return {\n      ciphertext: sealed.subarray(0, sealed.length - cipher.tagLength),\n      tag: sealed.subarray(sealed.length - cipher.tagLength),\n      iv\n    }\n  }\n}\n\nexport function xc20pDirEncrypter(key: Uint8Array): Encrypter {\n  const xc20pEncrypt = xc20pEncrypter(key)\n  const enc = 'XC20P'\n  const alg = 'dir'\n  async function encrypt(cleartext, protectedHeader = {}, aad?): Promise<EncryptionResult> {\n    const protHeader = encodeBase64url(JSON.stringify(Object.assign({ alg }, protectedHeader, { enc })))\n    const encodedAad = new Uint8Array(Buffer.from(aad ? `${protHeader}.${bytesToBase64url(aad)}` : protHeader))\n    return {\n      ...(xc20pEncrypt(cleartext, encodedAad)),\n      protectedHeader: protHeader\n    }\n  }\n  return { alg, enc, encrypt }\n}\n\nexport function xc20pDirDecrypter(key: Uint8Array): Decrypter {\n  const cipher = new XChaCha20Poly1305(key)\n  async function decrypt(sealed, iv, aad?): Promise<Uint8Array> {\n    return cipher.open(iv, sealed, aad)\n  }\n  return { alg: 'dir', enc: 'XC20P', decrypt }\n}\n\nexport function x25519Encrypter(publicKey: Uint8Array, kid?: string): Encrypter {\n  const alg = 'ECDH-ES+XC20PKW'\n  const keyLen = 256\n  const crv = 'X25519'\n  async function encryptCek(cek): Promise<Recipient> {\n    const epk = generateKeyPair()\n    const sharedSecret = sharedKey(epk.secretKey, publicKey)\n    // Key Encryption Key\n    const kek = concatKDF(sharedSecret, keyLen, alg)\n    const res = xc20pEncrypter(kek)(cek)\n    const recipient: Recipient = {\n      encrypted_key: bytesToBase64url(res.ciphertext),\n      header: {\n        alg,\n        iv: bytesToBase64url(res.iv),\n        tag: bytesToBase64url(res.tag),\n        epk: { kty: 'OKP', crv, x: bytesToBase64url(epk.publicKey) }\n      }\n    }\n    if (kid) recipient.header.kid = kid\n    return recipient\n  }\n  async function encrypt(cleartext, protectedHeader = {}, aad?): Promise<EncryptionResult> {\n    // we won't want alg to be set to dir from xc20pDirEncrypter\n    Object.assign(protectedHeader, { alg: undefined })\n    // Content Encryption Key\n    const cek = randomBytes(32)\n    return {\n      ...(await xc20pDirEncrypter(cek).encrypt(cleartext, protectedHeader, aad)),\n      recipient: await encryptCek(cek),\n      cek\n    }\n  }\n  return { alg, enc: 'XC20P', encrypt, encryptCek }\n}\n\nexport async function resolveX25519Encrypters(dids: string[], resolver: Resolver): Promise<Encrypter[]> {\n  return Promise.all(\n    dids.map(async (did) => {\n      const didDoc = await resolver.resolve(did)\n      if (!didDoc.keyAgreement) throw new Error(`Could not find x25519 key for ${did}`)\n      const agreementKeys: PublicKey[] = didDoc.keyAgreement?.map((key) => {\n        if (typeof key === 'string') {\n          return didDoc.publicKey.find((pk) => pk.id === key)\n        }\n        return key\n      })\n      const pk = agreementKeys.find((key) => {\n        return key.type === 'X25519KeyAgreementKey2019' && Boolean(key.publicKeyBase58)\n      })\n      if (!pk) throw new Error(`Could not find x25519 key for ${did}`)\n      return x25519Encrypter(base58ToBytes(pk.publicKeyBase58), pk.id)\n    })\n  )\n}\n\nfunction validateHeader(header: Record<string, any>) {\n  if(!(\n    header.epk &&\n    header.iv &&\n    header.tag\n  )) {\n    throw new Error('Invalid JWE')\n  }\n}\n\nexport function x25519Decrypter(secretKey: Uint8Array): Decrypter {\n  const alg = 'ECDH-ES+XC20PKW'\n  const keyLen = 256\n  const crv = 'X25519'\n  async function decrypt(sealed, iv, aad, recipient): Promise<Uint8Array> {\n    validateHeader(recipient.header)\n    if (recipient.header.epk.crv !== crv) return null\n    const publicKey = base64ToBytes(recipient.header.epk.x)\n    const sharedSecret = sharedKey(secretKey, publicKey)\n\n    // Key Encryption Key\n    const kek = concatKDF(sharedSecret, keyLen, alg)\n    // Content Encryption Key\n    const sealedCek = toSealed(recipient.encrypted_key, recipient.header.tag)\n    const cek = await xc20pDirDecrypter(kek).decrypt(sealedCek, base64ToBytes(recipient.header.iv))\n    if (cek === null) return null\n\n    return xc20pDirDecrypter(cek).decrypt(sealed, iv, aad)\n  }\n  return { alg, enc: 'XC20P', decrypt }\n}\n"],"names":["bytesToBase64url","b","u8a","base64ToBytes","s","inputBase64Url","replace","base58ToBytes","hexToBytes","input","startsWith","substring","toLowerCase","encodeBase64url","decodeBase64url","bytesToHex","stringToBytes","toJose","recoverable","r","recoveryParam","jose","Uint8Array","set","undefined","Error","fromJose","signature","signatureBytes","length","TypeError","slice","toSealed","ciphertext","tag","hexMatcher","base58Matcher","base64Matcher","parseKey","test","leftpad","data","size","repeat","sha256","payload","hash","toEthereumAddress","hexPublicKey","hashInput","keccak_256","arrayBuffer","writeUint32BE","value","array","encoded","toString","lengthAndInput","concatKDF","secret","keyLen","alg","secp256k1","EC","ES256KSigner","privateKey","privateKeyBytes","keyPair","keyFromPrivate","sign","SimpleSigner","hexPrivateKey","signer","EllipticSigner","EdDSASigner","secretKey","dataBytes","sig","NaclSigner","base64PrivateKey","toSignatureObject","rawsig","sigObj","extractPublicKeyBytes","pk","publicKeyBase58","publicKeyBase64","publicKeyHex","verifyRecoverableES256K","authenticators","signatures","so","map","recoveredKey","recoverPubKey","recoveredPublicKeyHex","encode","recoveredCompressedPublicKeyHex","recoveredAddress","find","ethereumAddress","filter","key","verifyEd25519","clear","verify","algorithms","ES256K","fullPublicKeys","ethAddressKeys","pubBytes","keyFromPublic","err","ES256K-R","Ed25519","EdDSA","VerifierAlgorithm","impl","instanceOfEcdsaSignature","object","ES256KSignerAlg","Ed25519SignerAlg","verifyJWT","jwt","options","resolver","auth","audience","callbackUrl","skewTime","decodeJWT","header","issuer","types","SUPPORTED_PUBLIC_KEY_TYPES","resolve","doc","getPublicKeyById","pubid","filtered","publicKey","id","publicKeysToCheck","authentication","authEntry","type","supported","resolveAuthenticator","iss","verifyJWSDecoded","now","Math","floor","Date","NBF_SKEW","nowSkewed","nbf","iat","exp","aud","Array","isArray","item","createJWT","expiresIn","typ","timestamps","fullPayload","createJWS","defaultAlg","encodedPayload","encodeSection","signingInput","join","jwtSigner","SignerAlgorithm","JSON","stringify","decodeJWS","jws","parts","match","parse","Object","assign","e","pubkeys","verifyJWS","decryptJWE","jwe","decrypter","cleartext","iv","recipients","rec","encrypted_key","validateJWE","protHeader","enc","sealed","aad","Buffer","from","decrypt","i","recipient","bind","pact","_settle","state","onFulfilled","_this","onRejected","result","encodeJWE","protected","protectedHeader","createJWE","encrypters","encrypt","encryptionResult","cek","tmpEnc","reduce","acc","encrypter","_jwe$recipients2","push","encryptCek","_push2","xc20pEncrypter","cipher","XChaCha20Poly1305","randomBytes","nonceLength","seal","subarray","tagLength","resolveX25519Encrypters","dids","Promise","all","did","didDoc","keyAgreement","_didDoc$keyAgreement","Boolean","x25519Encrypter","xc20pDirEncrypter","xc20pEncrypt","encodedAad","xc20pDirDecrypter","open","kid","epk","generateKeyPair","res","sharedKey","kty","crv","x","x25519Decrypter","validateHeader","kek","sealedCek"],"mappings":"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"}