{"version":3,"file":"index.umd.js","sources":["../src/util.ts","../src/Digest.ts","../src/signers/ES256KSigner.ts","../src/signers/EdDSASigner.ts","../src/VerifierAlgorithm.ts","../src/SignerAlgorithm.ts","../src/JWT.ts","../src/JWE.ts","../src/xc20pEncryption.ts","../src/signers/EllipticSigner.ts","../src/signers/NaclSigner.ts","../src/signers/SimpleSigner.ts"],"sourcesContent":["import * as u8a from 'uint8arrays'\n\n/**\n * @deprecated Signers will be expected to return base64url `string` signatures.\n */\nexport interface EcdsaSignature {\n  r: string\n  s: string\n  recoveryParam?: number\n}\n\nexport function bytesToBase64url(b: Uint8Array): string {\n  return u8a.toString(b, 'base64url')\n}\n\nexport function base64ToBytes(s: string): Uint8Array {\n  const inputBase64Url = s.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '')\n  return u8a.fromString(inputBase64Url, 'base64url')\n}\n\nexport function bytesToBase64(b: Uint8Array): string {\n  return u8a.toString(b, 'base64pad')\n}\n\nexport function base58ToBytes(s: string): Uint8Array {\n  return u8a.fromString(s, 'base58btc')\n}\n\nexport function hexToBytes(s: string): Uint8Array {\n  const input = s.startsWith('0x') ? s.substring(2) : s\n  return u8a.fromString(input.toLowerCase(), 'base16')\n}\n\nexport function encodeBase64url(s: string): string {\n  return bytesToBase64url(u8a.fromString(s))\n}\n\nexport function decodeBase64url(s: string): string {\n  return u8a.toString(base64ToBytes(s))\n}\n\nexport function bytesToHex(b: Uint8Array): string {\n  return u8a.toString(b, 'base16')\n}\n\nexport function stringToBytes(s: string): Uint8Array {\n  return u8a.fromString(s)\n}\n\nexport function toJose({ r, s, recoveryParam }: EcdsaSignature, recoverable?: boolean): string {\n  const jose = new Uint8Array(recoverable ? 65 : 64)\n  jose.set(u8a.fromString(r, 'base16'), 0)\n  jose.set(u8a.fromString(s, 'base16'), 32)\n  if (recoverable) {\n    if (recoveryParam === undefined) {\n      throw new Error('Signer did not return a recoveryParam')\n    }\n    jose[64] = recoveryParam\n  }\n  return bytesToBase64url(jose)\n}\n\nexport function fromJose(signature: string): { r: string; s: string; recoveryParam: number } {\n  const signatureBytes: Uint8Array = base64ToBytes(signature)\n  if (signatureBytes.length < 64 || signatureBytes.length > 65) {\n    throw new TypeError(`Wrong size for signature. Expected 64 or 65 bytes, but got ${signatureBytes.length}`)\n  }\n  const r = bytesToHex(signatureBytes.slice(0, 32))\n  const s = bytesToHex(signatureBytes.slice(32, 64))\n  const recoveryParam = signatureBytes.length === 65 ? signatureBytes[64] : undefined\n  return { r, s, recoveryParam }\n}\n\nexport function toSealed(ciphertext: string, tag: string): Uint8Array {\n  return u8a.concat([base64ToBytes(ciphertext), base64ToBytes(tag)])\n}\n\nconst hexMatcher = /^(0x)?([a-fA-F0-9]{64}|[a-fA-F0-9]{128})$/\nconst base58Matcher = /^([1-9A-HJ-NP-Za-km-z]{44}|[1-9A-HJ-NP-Za-km-z]{88})$/\nconst base64Matcher = /^([0-9a-zA-Z=\\-_\\+\\/]{43}|[0-9a-zA-Z=\\-_\\+\\/]{86})(={0,2})$/\n\n/**\n * Parses a private key and returns the Uint8Array representation.\n * This method uses an heuristic to determine the key encoding to then be able to parse it into 32 or 64 bytes.\n *\n * @param input a 32 or 64 byte key presented either as a Uint8Array or as a hex, base64, or base58btc encoded string\n *\n * @throws TypeError('Invalid private key format') if the key doesn't match any of the accepted formats or length\n */\nexport function parseKey(input: string | Uint8Array): Uint8Array {\n  if (typeof input === 'string') {\n    if (hexMatcher.test(input)) {\n      return hexToBytes(input)\n    } else if (base58Matcher.test(input)) {\n      return base58ToBytes(input)\n    } else if (base64Matcher.test(input)) {\n      return base64ToBytes(input)\n    } else {\n      throw TypeError('Invalid private key format')\n    }\n  } else if (input instanceof Uint8Array) {\n    return input\n  } else {\n    throw TypeError('Invalid private key format')\n  }\n}\n\nexport function leftpad(data: string, size = 64): string {\n  if (data.length === size) return data\n  return '0'.repeat(size - data.length) + data\n}\n","import { hash } from '@stablelib/sha256'\nimport * as u8a from 'uint8arrays'\nimport { keccak_256 } from 'js-sha3' // eslint-disable-line\n\nexport function sha256(payload: string | Uint8Array): Uint8Array {\n  const data = (typeof payload === 'string') ? u8a.fromString(payload) : payload\n  return hash(data)\n}\n\nexport function keccak(data: Uint8Array): Uint8Array {\n  return new Uint8Array(keccak_256.arrayBuffer(data))\n}\n\nexport function toEthereumAddress(hexPublicKey: string): string {\n  const hashInput = u8a.fromString(hexPublicKey.slice(2), 'base16')\n  return `0x${u8a.toString(keccak(hashInput).slice(-20), 'base16')}`\n}\n\nfunction writeUint32BE(value: number, array = new Uint8Array(4)): Uint8Array {\n  const encoded = u8a.fromString(value.toString(), 'base10')\n  array.set(encoded, 4 - encoded.length)\n  return array\n}\n\nconst lengthAndInput = (input: Uint8Array): Uint8Array => u8a.concat([writeUint32BE(input.length), input])\n\n// This implementation of concatKDF was inspired by these two implementations:\n// https://github.com/digitalbazaar/minimal-cipher/blob/master/algorithms/ecdhkdf.js\n// https://github.com/panva/jose/blob/master/lib/jwa/ecdh/derive.js\nexport function concatKDF(secret: Uint8Array, keyLen: number, alg: string): Uint8Array {\n  if (keyLen !== 256) throw new Error(`Unsupported key length: ${keyLen}`)\n  const value = u8a.concat([\n    lengthAndInput(u8a.fromString(alg)),\n    lengthAndInput(new Uint8Array(0)), // apu\n    lengthAndInput(new Uint8Array(0)), // apv\n    writeUint32BE(keyLen)\n  ])\n  // since our key lenght is 256 we only have to do one round\n  const roundNumber = 1\n  return hash(u8a.concat([ writeUint32BE(roundNumber), secret, value ]))\n}\n","import { parseKey, leftpad } from '../util'\nimport { toJose } from '../util'\nimport { Signer } from '../JWT'\nimport { sha256 } from '../Digest'\n\nimport { ec as EC, ec } from 'elliptic'\nconst secp256k1: EC = new EC('secp256k1')\n\n/**\n *  Creates a configured signer function for signing data using the ES256K (secp256k1 + sha256) algorithm.\n *\n *  The signing function itself takes the data as a `Uint8Array` or `string` and returns a `base64Url`-encoded signature\n *\n *  @example\n *  ```typescript\n *  const sign: Signer = ES256KSigner(process.env.PRIVATE_KEY)\n *  const signature: string = await sign(data)\n *  ```\n *\n *  @param    {String}    privateKey   a private key as `Uint8Array` or encoded as `base64`, `base58`, or `hex` string\n *  @param    {Boolean}   recoverable  an optional flag to add the recovery param to the generated signatures\n *  @return   {Function}               a configured signer function `(data: string | Uint8Array): Promise<string>`\n */\nexport function ES256KSigner(privateKey: string | Uint8Array, recoverable: boolean = false): Signer {\n  const privateKeyBytes: Uint8Array = parseKey(privateKey)\n  if (privateKeyBytes.length !== 32) {\n    throw new Error(`Invalid private key format. Expecting 32 bytes, but got ${privateKeyBytes.length}`)\n  }\n  const keyPair: ec.KeyPair = secp256k1.keyFromPrivate(privateKeyBytes)\n\n  return async (data: string | Uint8Array): Promise<string> => {\n    const { r, s, recoveryParam }: EC.Signature = keyPair.sign(sha256(data))\n    return toJose(\n      {\n        r: leftpad(r.toString('hex')),\n        s: leftpad(s.toString('hex')),\n        recoveryParam\n      },\n      recoverable\n    )\n  }\n}\n","import { sign } from '@stablelib/ed25519'\nimport { Signer } from '../JWT'\nimport { bytesToBase64url, parseKey, stringToBytes } from '../util'\n\n/**\n *  Creates a configured signer function for signing data using the EdDSA (Ed25519) algorithm.\n *\n *  The signing function itself takes the data as a `Uint8Array` or `string` and returns a `base64Url`-encoded signature\n *\n *  @example\n *  ```typescript\n *  const sign: Signer = EdDSASigner(process.env.PRIVATE_KEY)\n *  const signature: string = await sign(data)\n *  ```\n *\n *  @param    {String}    secretKey   a 64 byte secret key as `Uint8Array` or encoded as `base64`, `base58`, or `hex` string\n *  @return   {Function}              a configured signer function `(data: string | Uint8Array): Promise<string>`\n */\nexport function EdDSASigner(secretKey: string | Uint8Array): Signer {\n  const privateKeyBytes: Uint8Array = parseKey(secretKey)\n  if (privateKeyBytes.length !== 64) {\n    throw new Error(`Invalid private key format. Expecting 64 bytes, but got ${privateKeyBytes.length}`)\n  }\n  return async (data: string | Uint8Array): Promise<string> => {\n    const dataBytes: Uint8Array = (typeof data === 'string') ? stringToBytes(data) : data\n    const sig: Uint8Array = sign(privateKeyBytes, dataBytes)\n    return bytesToBase64url(sig)\n  }\n}\n","import { ec as EC } from 'elliptic'\nimport { sha256, toEthereumAddress } from './Digest'\nimport { verify } from '@stablelib/ed25519'\nimport { PublicKey } from 'did-resolver'\nimport { hexToBytes, base58ToBytes, base64ToBytes, bytesToHex, EcdsaSignature, stringToBytes } from './util'\n\nconst secp256k1 = new EC('secp256k1')\n\n// converts a JOSE signature to it's components\nexport function toSignatureObject(signature: string, recoverable = false): EcdsaSignature {\n  const rawsig: Uint8Array = base64ToBytes(signature)\n  if (rawsig.length !== (recoverable ? 65 : 64)) {\n    throw new Error('wrong signature length')\n  }\n  const r: string = bytesToHex(rawsig.slice(0, 32))\n  const s: string = bytesToHex(rawsig.slice(32, 64))\n  const sigObj: EcdsaSignature = { r, s }\n  if (recoverable) {\n    sigObj.recoveryParam = rawsig[64]\n  }\n  return sigObj\n}\n\nfunction extractPublicKeyBytes(pk: PublicKey): Uint8Array {\n  if (pk.publicKeyBase58) {\n    return base58ToBytes(pk.publicKeyBase58)\n  } else if (pk.publicKeyBase64) {\n    return base64ToBytes(pk.publicKeyBase64)\n  } else if (pk.publicKeyHex) {\n    return hexToBytes(pk.publicKeyHex)\n  }\n  return new Uint8Array()\n}\n\nexport function verifyES256K(data: string, signature: string, authenticators: PublicKey[]): PublicKey {\n  const hash: Uint8Array = sha256(data)\n  const sigObj: EcdsaSignature = toSignatureObject(signature)\n  const fullPublicKeys = authenticators.filter(({ ethereumAddress }) => {\n    return typeof ethereumAddress === 'undefined'\n  })\n  const ethAddressKeys = authenticators.filter(({ ethereumAddress }) => {\n    return typeof ethereumAddress !== 'undefined'\n  })\n\n  let signer: PublicKey = fullPublicKeys.find((pk: PublicKey) => {\n    try {\n      const pubBytes = extractPublicKeyBytes(pk)\n      return secp256k1.keyFromPublic(pubBytes).verify(hash, sigObj)\n    } catch (err) {\n      return false\n    }\n  })\n\n  if (!signer && ethAddressKeys.length > 0) {\n    signer = verifyRecoverableES256K(data, signature, ethAddressKeys)\n  }\n\n  if (!signer) throw new Error('Signature invalid for JWT')\n  return signer\n}\n\nexport function verifyRecoverableES256K(data: string, signature: string, authenticators: PublicKey[]): PublicKey {\n  let signatures: EcdsaSignature[]\n  if (signature.length > 86) {\n    signatures = [toSignatureObject(signature, true)]\n  } else {\n    const so = toSignatureObject(signature, false)\n    signatures = [\n      { ...so, recoveryParam: 0 },\n      { ...so, recoveryParam: 1 }\n    ]\n  }\n\n  const checkSignatureAgainstSigner = (sigObj: EcdsaSignature): PublicKey => {\n    const hash: Uint8Array = sha256(data)\n    const recoveredKey: any = secp256k1.recoverPubKey(hash, sigObj, sigObj.recoveryParam)\n    const recoveredPublicKeyHex: string = recoveredKey.encode('hex')\n    const recoveredCompressedPublicKeyHex: string = recoveredKey.encode('hex', true)\n    const recoveredAddress: string = toEthereumAddress(recoveredPublicKeyHex)\n\n    const signer: PublicKey = authenticators.find(\n      ({ publicKeyHex, ethereumAddress }) =>\n        publicKeyHex === recoveredPublicKeyHex ||\n        publicKeyHex === recoveredCompressedPublicKeyHex ||\n        ethereumAddress === recoveredAddress\n    )\n\n    return signer\n  }\n\n  const signer: PublicKey[] = signatures.map(checkSignatureAgainstSigner).filter(key => key != null)\n\n  if (signer.length === 0) throw new Error('Signature invalid for JWT')\n  return signer[0]\n}\n\nexport function verifyEd25519(data: string, signature: string, authenticators: PublicKey[]): PublicKey {\n  const clear: Uint8Array = stringToBytes(data)\n  const sig: Uint8Array = base64ToBytes(signature)\n  const signer: PublicKey = authenticators.find((pk: PublicKey) => {\n    return verify(extractPublicKeyBytes(pk), clear, sig)\n  }\n  )\n  if (!signer) throw new Error('Signature invalid for JWT')\n  return signer\n}\n\ntype Verifier = (data: string, signature: string, authenticators: PublicKey[]) => PublicKey\ninterface Algorithms {\n  [name: string]: Verifier\n}\nconst algorithms: Algorithms = {\n  ES256K: verifyES256K,\n  // This is a non-standard algorithm but retained for backwards compatibility\n  // see https://github.com/decentralized-identity/did-jwt/issues/146\n  'ES256K-R': verifyRecoverableES256K,\n  // This is actually incorrect but retained for backwards compatibility\n  // see https://github.com/decentralized-identity/did-jwt/issues/130\n  Ed25519: verifyEd25519,\n  EdDSA: verifyEd25519\n}\n\nfunction VerifierAlgorithm(alg: string): Verifier {\n  const impl: Verifier = algorithms[alg]\n  if (!impl) throw new Error(`Unsupported algorithm ${alg}`)\n  return impl\n}\n\nVerifierAlgorithm.toSignatureObject = toSignatureObject\n\nexport default VerifierAlgorithm\n","import { Signer, SignerAlgorithm } from './JWT'\nimport { EcdsaSignature, fromJose, toJose } from './util'\n\nfunction instanceOfEcdsaSignature(object: any): object is EcdsaSignature {\n  return typeof object === 'object' && 'r' in object && 's' in object\n}\n\nexport function ES256KSignerAlg(recoverable?: boolean): SignerAlgorithm {\n  return async function sign(payload: string, signer: Signer): Promise<string> {\n    const signature: EcdsaSignature | string = await signer(payload)\n    if (instanceOfEcdsaSignature(signature)) {\n      return toJose(signature, recoverable)\n    } else {\n      if (recoverable && typeof fromJose(signature).recoveryParam === 'undefined') throw new Error(`ES256K-R not supported when signer doesn't provide a recovery param`)\n      return signature\n    }\n  }\n}\n\nexport function Ed25519SignerAlg(): SignerAlgorithm {\n  return async function sign(payload: string, signer: Signer): Promise<string> {\n    const signature: EcdsaSignature | string = await signer(payload)\n    if (!instanceOfEcdsaSignature(signature)) {\n      return signature\n    } else {\n      throw new Error('expected a signer function that returns a string instead of signature object')\n    }\n  }\n}\n\ninterface SignerAlgorithms {\n  [alg: string]: SignerAlgorithm\n}\n\nconst algorithms: SignerAlgorithms = {\n  ES256K: ES256KSignerAlg(),\n  // This is a non-standard algorithm but retained for backwards compatibility\n  // see https://github.com/decentralized-identity/did-jwt/issues/146\n  'ES256K-R': ES256KSignerAlg(true),\n  // This is actually incorrect but retained for backwards compatibility\n  // see https://github.com/decentralized-identity/did-jwt/issues/130\n  Ed25519: Ed25519SignerAlg(),\n  EdDSA: Ed25519SignerAlg()\n}\n\nfunction SignerAlgorithm(alg: string): SignerAlgorithm {\n  const impl: SignerAlgorithm = algorithms[alg]\n  if (!impl) throw new Error(`Unsupported algorithm ${alg}`)\n  return impl\n}\n\nexport default SignerAlgorithm\n","import VerifierAlgorithm from './VerifierAlgorithm'\nimport SignerAlgorithm from './SignerAlgorithm'\nimport { encodeBase64url, decodeBase64url, EcdsaSignature } from './util'\nimport { DIDDocument, PublicKey, Authentication } from 'did-resolver'\n\nexport type Signer = (data: string | Uint8Array) => Promise<EcdsaSignature | string>\nexport type SignerAlgorithm = (payload: string, signer: Signer) => Promise<string>\n\nexport interface JWTOptions {\n  issuer: string\n  signer: Signer\n  /**\n   * @deprecated Please use `header.alg` to specify the JWT algorithm.\n   */\n  alg?: string\n  expiresIn?: number\n}\n\nexport interface Resolvable {\n  resolve: (did: string) => Promise<DIDDocument | null>\n}\n\nexport interface JWTVerifyOptions {\n  auth?: boolean\n  audience?: string\n  callbackUrl?: string\n  resolver?: Resolvable\n  skewTime?: number\n}\n\nexport interface DIDAuthenticator {\n  authenticators: PublicKey[]\n  issuer: string\n  doc: DIDDocument\n}\n\nexport interface JWTHeader {\n  typ: 'JWT'\n  alg: string\n  [x: string]: any\n}\n\nexport interface JWTPayload {\n  iss?: string\n  sub?: string\n  aud?: string | string[]\n  iat?: number\n  nbf?: number\n  type?: string\n  exp?: number\n  rexp?: number\n  [x: string]: any\n}\n\nexport interface JWTDecoded {\n  header: JWTHeader\n  payload: JWTPayload\n  signature: string\n  data: string\n}\n\nexport interface JWSDecoded {\n  header: JWTHeader\n  payload: string\n  signature: string\n  data: string\n}\n\nexport interface JWTVerified {\n  payload: any\n  doc: DIDDocument\n  issuer: string\n  signer: object\n  jwt: string\n}\n\nexport interface PublicKeyTypes {\n  [name: string]: string[]\n}\nexport const SUPPORTED_PUBLIC_KEY_TYPES: PublicKeyTypes = {\n  ES256K: [\n    'Secp256k1VerificationKey2018',\n    'Secp256k1SignatureVerificationKey2018',\n    'EcdsaPublicKeySecp256k1',\n    'EcdsaSecp256k1VerificationKey2019'\n  ],\n  'ES256K-R': [\n    'Secp256k1VerificationKey2018',\n    'Secp256k1SignatureVerificationKey2018',\n    'EcdsaPublicKeySecp256k1',\n    'EcdsaSecp256k1VerificationKey2019'\n  ],\n  Ed25519: ['ED25519SignatureVerification', 'Ed25519VerificationKey2018'],\n  EdDSA: ['ED25519SignatureVerification', 'Ed25519VerificationKey2018']\n}\n\nconst defaultAlg = 'ES256K'\n\nfunction encodeSection(data: any): string {\n  return encodeBase64url(JSON.stringify(data))\n}\n\nexport const NBF_SKEW: number = 300\n\nfunction decodeJWS(jws: string): JWSDecoded {\n  const parts: RegExpMatchArray = jws.match(/^([a-zA-Z0-9_-]+)\\.([a-zA-Z0-9_-]+)\\.([a-zA-Z0-9_-]+)$/)\n  if (parts) {\n    return {\n      header: JSON.parse(decodeBase64url(parts[1])),\n      payload: parts[2],\n      signature: parts[3],\n      data: `${parts[1]}.${parts[2]}`\n    }\n  }\n  throw new Error('Incorrect format JWS')\n}\n\n/**  @module did-jwt/JWT */\n\n/**\n *  Decodes a JWT and returns an object representing the payload\n *\n *  @example\n *  decodeJWT('eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJpYXQiOjE1...')\n *\n *  @param    {String}            jwt                a JSON Web Token to verify\n *  @return   {Object}                               a JS object representing the decoded JWT\n */\nexport function decodeJWT(jwt: string): JWTDecoded {\n  if (!jwt) throw new Error('no JWT passed into decodeJWT')\n  try {\n    const jws = decodeJWS(jwt)\n    const decodedJwt: JWTDecoded = Object.assign(jws, { payload: JSON.parse(decodeBase64url(jws.payload)) })\n    return decodedJwt\n  } catch (e) {\n    throw new Error('Incorrect format JWT')\n  }\n}\n\n/**\n *  Creates a signed JWS given a payload, a signer, and an optional header.\n *\n *  @example\n *  const signer = ES256KSigner(process.env.PRIVATE_KEY)\n *  const jws = await createJWS({ my: 'payload' }, signer)\n *\n *  @param    {Object}            payload           payload object\n *  @param    {Signer}            signer            a signer, see `ES256KSigner or `EdDSASigner`\n *  @param    {Object}            header            optional object to specify or customize the JWS header\n *  @return   {Promise<Object, Error>}              a promise which resolves with a JWS string or rejects with an error\n */\nexport async function createJWS(\n  payload: string | any,\n  signer: Signer,\n  header: Partial<JWTHeader> = {}\n): Promise<string> {\n  if (!header.alg) header.alg = defaultAlg\n  const encodedPayload = typeof payload === 'string' ? payload : encodeSection(payload)\n  const signingInput: string = [encodeSection(header), encodedPayload].join('.')\n\n  const jwtSigner: SignerAlgorithm = SignerAlgorithm(header.alg)\n  const signature: string = await jwtSigner(signingInput, signer)\n  return [signingInput, signature].join('.')\n}\n\n/**\n *  Creates a signed JWT given an address which becomes the issuer, a signer, and a payload for which the signature is over.\n *\n *  @example\n *  const signer = ES256KSigner(process.env.PRIVATE_KEY)\n *  createJWT({address: '5A8bRWU3F7j3REx3vkJ...', signer}, {key1: 'value', key2: ..., ... }).then(jwt => {\n *      ...\n *  })\n *\n *  @param    {Object}            payload            payload object\n *  @param    {Object}            [options]          an unsigned credential object\n *  @param    {String}            options.issuer     The DID of the issuer (signer) of JWT\n *  @param    {String}            options.alg        [DEPRECATED] The JWT signing algorithm to use. Supports: [ES256K, ES256K-R, Ed25519, EdDSA], Defaults to: ES256K.\n *                                                   Please use `header.alg` to specify the algorithm\n *  @param    {Signer}            options.signer     a `Signer` function, Please see `ES256KSigner` or `EdDSASigner`\n *  @param    {Object}            header             optional object to specify or customize the JWT header\n *  @return   {Promise<Object, Error>}               a promise which resolves with a signed JSON Web Token or rejects with an error\n */\nexport async function createJWT(\n  payload: any,\n  { issuer, signer, alg, expiresIn }: JWTOptions,\n  header: Partial<JWTHeader> = {}\n): Promise<string> {\n  if (!signer) throw new Error('No Signer functionality has been configured')\n  if (!issuer) throw new Error('No issuing DID has been configured')\n  if (!header.typ) header.typ = 'JWT'\n  if (!header.alg) header.alg = alg\n  const timestamps: Partial<JWTPayload> = {\n    iat: Math.floor(Date.now() / 1000),\n    exp: undefined\n  }\n  if (expiresIn) {\n    if (typeof expiresIn === 'number') {\n      timestamps.exp = (payload.nbf || timestamps.iat) + Math.floor(expiresIn)\n    } else {\n      throw new Error('JWT expiresIn is not a number')\n    }\n  }\n  const fullPayload = { ...timestamps, ...payload, iss: issuer }\n  return createJWS(fullPayload, signer, header)\n}\n\nfunction verifyJWSDecoded({ header, data, signature }: JWSDecoded, pubkeys: PublicKey | PublicKey[]): PublicKey {\n  if (!Array.isArray(pubkeys)) pubkeys = [pubkeys]\n  const signer: PublicKey = VerifierAlgorithm(header.alg)(data, signature, pubkeys)\n  return signer\n}\n\n/**\n *  Verifies given JWS. If the JWS is valid, returns the public key that was\n *  used to sign the JWS, or throws an `Error` if none of the `pubkeys` match.\n *\n *  @example\n *  const pubkey = verifyJWT('eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJyZXF1Z....', { publicKeyHex: '0x12341...' })\n *\n *  @param    {String}                          jws         A JWS string to verify\n *  @param    {Array<PublicKey> | PublicKey}    pubkeys     The public keys used to verify the JWS\n *  @return   {PublicKey}                       The public key used to sign the JWS\n */\nexport function verifyJWS(jws: string, pubkeys: PublicKey | PublicKey[]): PublicKey {\n  const jwsDecoded: JWSDecoded = decodeJWS(jws)\n  return verifyJWSDecoded(jwsDecoded, pubkeys)\n}\n\n/**\n *  Verifies given JWT. If the JWT is valid, the promise returns an object including the JWT, the payload of the JWT,\n *  and the did doc of the issuer of the JWT.\n *\n *  @example\n *  verifyJWT('did:uport:eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJyZXF1Z....', {audience: '5A8bRWU3F7j3REx3vkJ...', callbackUrl: 'https://...'}).then(obj => {\n *      const did = obj.did // DID of signer\n *      const payload = obj.payload\n *      const doc = obj.doc // DID Document of signer\n *      const jwt = obj.jwt\n *      const signerKeyId = obj.signerKeyId // ID of key in DID document that signed JWT\n *      ...\n *  })\n *\n *  @param    {String}            jwt                a JSON Web Token to verify\n *  @param    {Object}            [options]           an unsigned credential object\n *  @param    {Boolean}           options.auth        Require signer to be listed in the authentication section of the DID document (for Authentication purposes)\n *  @param    {String}            options.audience    DID of the recipient of the JWT\n *  @param    {String}            options.callbackUrl callback url in JWT\n *  @return   {Promise<Object, Error>}               a promise which resolves with a response object or rejects with an error\n */\nexport async function verifyJWT(\n  jwt: string,\n  options: JWTVerifyOptions = {\n    resolver: null,\n    auth: null,\n    audience: null,\n    callbackUrl: null,\n    skewTime: null\n  }\n): Promise<JWTVerified> {\n  if (!options.resolver) throw new Error('No DID resolver has been configured')\n  const { payload, header, signature, data }: JWTDecoded = decodeJWT(jwt)\n  const { doc, authenticators, issuer }: DIDAuthenticator = await resolveAuthenticator(\n    options.resolver,\n    header.alg,\n    payload.iss,\n    options.auth\n  )\n  const signer: PublicKey = await verifyJWSDecoded({ header, data, signature } as JWSDecoded, authenticators)\n  const now: number = Math.floor(Date.now() / 1000)\n  const skewTime = options.skewTime >= 0 ? options.skewTime : NBF_SKEW\n  if (signer) {\n    const nowSkewed = now + skewTime\n    if (payload.nbf) {\n      if (payload.nbf > nowSkewed) {\n        throw new Error(`JWT not valid before nbf: ${payload.nbf}`)\n      }\n    } else if (payload.iat && payload.iat > nowSkewed) {\n      throw new Error(`JWT not valid yet (issued in the future) iat: ${payload.iat}`)\n    }\n    if (payload.exp && payload.exp <= now - skewTime) {\n      throw new Error(`JWT has expired: exp: ${payload.exp} < now: ${now}`)\n    }\n    if (payload.aud) {\n      if (!options.audience && !options.callbackUrl) {\n        throw new Error('JWT audience is required but your app address has not been configured')\n      }\n      const audArray = Array.isArray(payload.aud) ? payload.aud : [payload.aud]\n      const matchedAudience = audArray.find((item) => options.audience === item || options.callbackUrl === item)\n\n      if (typeof matchedAudience === 'undefined') {\n        throw new Error(`JWT audience does not match your DID or callback url`)\n      }\n    }\n    return { payload, doc, issuer, signer, jwt }\n  }\n}\n\n/**\n * Resolves relevant public keys or other authenticating material used to verify signature from the DID document of provided DID\n *\n *  @example\n *  resolveAuthenticator(resolver, 'ES256K', 'did:uport:2nQtiQG6Cgm1GYTBaaKAgr76uY7iSexUkqX').then(obj => {\n *      const payload = obj.payload\n *      const profile = obj.profile\n *      const jwt = obj.jwt\n *      ...\n *  })\n *\n *  @param    {String}            alg                a JWT algorithm\n *  @param    {String}            did                a Decentralized IDentifier (DID) to lookup\n *  @param    {Boolean}           auth               Restrict public keys to ones specifically listed in the 'authentication' section of DID document\n *  @return   {Promise<Object, Error>}               a promise which resolves with a response object containing an array of authenticators or if non exist rejects with an error\n */\nexport async function resolveAuthenticator(\n  resolver: Resolvable,\n  alg: string,\n  issuer: string,\n  auth?: boolean\n): Promise<DIDAuthenticator> {\n  const types: string[] = SUPPORTED_PUBLIC_KEY_TYPES[alg]\n  if (!types || types.length === 0) {\n    throw new Error(`No supported signature types for algorithm ${alg}`)\n  }\n  const doc: DIDDocument = await resolver.resolve(issuer)\n  if (!doc) throw new Error(`Unable to resolve DID document for ${issuer}`)\n\n  const getPublicKeyById = (doc: DIDDocument, pubid: string): PublicKey | null => {\n    const filtered = doc.publicKey.filter(({ id }) => pubid === id)\n    return filtered.length > 0 ? filtered[0] : null\n  }\n\n  let publicKeysToCheck: PublicKey[] = doc.publicKey || []\n  if (auth) {\n    publicKeysToCheck = (doc.authentication || [])\n      .map((authEntry) => {\n        if (typeof authEntry === 'string') {\n          return getPublicKeyById(doc, authEntry)\n        } else if (typeof (<Authentication>authEntry).publicKey === 'string') {\n          return getPublicKeyById(doc, (<Authentication>authEntry).publicKey)\n        } else {\n          return <PublicKey>authEntry\n        }\n      })\n      .filter((key) => key != null)\n  }\n\n  const authenticators: PublicKey[] = publicKeysToCheck.filter(({ type }) =>\n    types.find((supported) => supported === type)\n  )\n\n  if (auth && (!authenticators || authenticators.length === 0)) {\n    throw new Error(`DID document for ${issuer} does not have public keys suitable for authenticating user`)\n  }\n  if (!authenticators || authenticators.length === 0) {\n    throw new Error(`DID document for ${issuer} does not have public keys for ${alg}`)\n  }\n  return { authenticators, issuer, doc }\n}\n","import { base64ToBytes, bytesToBase64url, decodeBase64url, toSealed } from './util'\n\ninterface RecipientHeader {\n  alg: string\n  iv: string\n  tag: string\n  epk?: Record<string, any> // Ephemeral  Public Key\n  kid?: string\n}\n\nexport interface Recipient {\n  header: RecipientHeader\n  encrypted_key: string\n}\n\nexport interface JWE {\n  protected: string\n  iv: string\n  ciphertext: string\n  tag: string\n  aad?: string\n  recipients?: Recipient[]\n}\n\nexport interface EncryptionResult {\n  ciphertext: Uint8Array\n  tag: Uint8Array\n  iv: Uint8Array\n  protectedHeader?: string\n  recipient?: Recipient\n  cek?: Uint8Array\n}\n\nexport interface Encrypter {\n  alg: string\n  enc: string\n  encrypt: (cleartext: Uint8Array, protectedHeader: Record<string, any>, aad?: Uint8Array) => Promise<EncryptionResult>\n  encryptCek?: (cek: Uint8Array) => Promise<Recipient>\n}\n\nexport interface Decrypter {\n  alg: string\n  enc: string\n  decrypt: (sealed: Uint8Array, iv: Uint8Array, aad?: Uint8Array, recipient?: Record<string, any>) => Promise<Uint8Array>\n}\n\nfunction validateJWE(jwe: JWE) {\n  if (!(jwe.protected && jwe.iv && jwe.ciphertext && jwe.tag)) {\n    throw new Error('Invalid JWE')\n  }\n  if (jwe.recipients) {\n    jwe.recipients.map(rec => {\n      if (!(rec.header && rec.encrypted_key)) {\n        throw new Error('Invalid JWE')\n      }\n    })\n  }\n}\n\nfunction encodeJWE(\n  {\n    ciphertext,\n    tag,\n    iv,\n    protectedHeader,\n    recipient\n  }: EncryptionResult,\n  aad?: Uint8Array\n): JWE {\n  const jwe: JWE = {\n    protected: protectedHeader,\n    iv: bytesToBase64url(iv),\n    ciphertext: bytesToBase64url(ciphertext),\n    tag: bytesToBase64url(tag)\n  }\n  if (aad) jwe.aad = bytesToBase64url(aad)\n  if (recipient) jwe.recipients = [recipient]\n  return jwe\n}\n\nexport async function createJWE(cleartext: Uint8Array, encrypters: Encrypter[], protectedHeader = {}, aad?: Uint8Array): Promise<JWE> {\n  if (encrypters[0].alg === 'dir') {\n    if (encrypters.length > 1) throw new Error('Can only do \"dir\" encryption to one key.')\n    const encryptionResult = await encrypters[0].encrypt(cleartext, protectedHeader, aad)\n    return encodeJWE(encryptionResult, aad)\n  } else {\n    const tmpEnc = encrypters[0].enc\n    if (!encrypters.reduce((acc, encrypter) => acc && encrypter.enc === tmpEnc, true)) {\n      throw new Error('Incompatible encrypters passed')\n    }\n    let cek\n    let jwe\n    for (const encrypter of encrypters) {\n      if (!cek) {\n        const encryptionResult = await encrypter.encrypt(cleartext, protectedHeader, aad)\n        cek = encryptionResult.cek\n        jwe = encodeJWE(encryptionResult, aad)\n      } else {\n        jwe.recipients.push(await encrypter.encryptCek(cek))\n      }\n    }\n    return jwe\n  }\n}\n\nexport async function decryptJWE(jwe: JWE, decrypter: Decrypter): Promise<Uint8Array> {\n  validateJWE(jwe)\n  const protHeader = JSON.parse(decodeBase64url(jwe.protected))\n  if (protHeader.enc !== decrypter.enc) throw new Error(`Decrypter does not support: '${protHeader.enc}'`)\n  const sealed = toSealed(jwe.ciphertext, jwe.tag)\n  const aad = new Uint8Array(Buffer.from(jwe.aad ? `${jwe.protected}.${jwe.aad}` : jwe.protected))\n  let cleartext = null\n  if (protHeader.alg === 'dir' && decrypter.alg === 'dir') {\n    cleartext = await decrypter.decrypt(sealed, base64ToBytes(jwe.iv), aad)\n  } else if (!jwe.recipients || jwe.recipients.length === 0) {\n    throw new Error('Invalid JWE')\n  } else {\n    for (let i = 0; !cleartext && i < jwe.recipients.length; i++) {\n      const recipient = jwe.recipients[i]\n      Object.assign(recipient.header, protHeader)\n      if (recipient.header.alg === decrypter.alg) {\n        cleartext = await decrypter.decrypt(sealed, base64ToBytes(jwe.iv), aad, recipient)\n      }\n    }\n  }\n  if (cleartext === null) throw new Error('Failed to decrypt')\n  return cleartext\n}\n","import { XChaCha20Poly1305 } from '@stablelib/xchacha20poly1305'\nimport { generateKeyPair, sharedKey } from '@stablelib/x25519'\nimport { randomBytes } from '@stablelib/random'\nimport { concatKDF } from './Digest'\nimport { bytesToBase64url, base58ToBytes, encodeBase64url, toSealed, base64ToBytes } from './util'\nimport { Recipient, EncryptionResult, Encrypter, Decrypter } from './JWE'\nimport type { PublicKey, Resolver } from 'did-resolver'\n\nfunction xc20pEncrypter(key: Uint8Array): (cleartext: Uint8Array, aad?: Uint8Array) => EncryptionResult {\n  const cipher = new XChaCha20Poly1305(key)\n  return (cleartext: Uint8Array, aad?: Uint8Array) => {\n    const iv = randomBytes(cipher.nonceLength)\n    const sealed = cipher.seal(iv, cleartext, aad)\n    return {\n      ciphertext: sealed.subarray(0, sealed.length - cipher.tagLength),\n      tag: sealed.subarray(sealed.length - cipher.tagLength),\n      iv\n    }\n  }\n}\n\nexport function xc20pDirEncrypter(key: Uint8Array): Encrypter {\n  const xc20pEncrypt = xc20pEncrypter(key)\n  const enc = 'XC20P'\n  const alg = 'dir'\n  async function encrypt(cleartext, protectedHeader = {}, aad?): Promise<EncryptionResult> {\n    const protHeader = encodeBase64url(JSON.stringify(Object.assign({ alg }, protectedHeader, { enc })))\n    const encodedAad = new Uint8Array(Buffer.from(aad ? `${protHeader}.${bytesToBase64url(aad)}` : protHeader))\n    return {\n      ...(xc20pEncrypt(cleartext, encodedAad)),\n      protectedHeader: protHeader\n    }\n  }\n  return { alg, enc, encrypt }\n}\n\nexport function xc20pDirDecrypter(key: Uint8Array): Decrypter {\n  const cipher = new XChaCha20Poly1305(key)\n  async function decrypt(sealed, iv, aad?): Promise<Uint8Array> {\n    return cipher.open(iv, sealed, aad)\n  }\n  return { alg: 'dir', enc: 'XC20P', decrypt }\n}\n\nexport function x25519Encrypter(publicKey: Uint8Array, kid?: string): Encrypter {\n  const alg = 'ECDH-ES+XC20PKW'\n  const keyLen = 256\n  const crv = 'X25519'\n  async function encryptCek(cek): Promise<Recipient> {\n    const epk = generateKeyPair()\n    const sharedSecret = sharedKey(epk.secretKey, publicKey)\n    // Key Encryption Key\n    const kek = concatKDF(sharedSecret, keyLen, alg)\n    const res = xc20pEncrypter(kek)(cek)\n    const recipient: Recipient = {\n      encrypted_key: bytesToBase64url(res.ciphertext),\n      header: {\n        alg,\n        iv: bytesToBase64url(res.iv),\n        tag: bytesToBase64url(res.tag),\n        epk: { kty: 'OKP', crv, x: bytesToBase64url(epk.publicKey) }\n      }\n    }\n    if (kid) recipient.header.kid = kid\n    return recipient\n  }\n  async function encrypt(cleartext, protectedHeader = {}, aad?): Promise<EncryptionResult> {\n    // we won't want alg to be set to dir from xc20pDirEncrypter\n    Object.assign(protectedHeader, { alg: undefined })\n    // Content Encryption Key\n    const cek = randomBytes(32)\n    return {\n      ...(await xc20pDirEncrypter(cek).encrypt(cleartext, protectedHeader, aad)),\n      recipient: await encryptCek(cek),\n      cek\n    }\n  }\n  return { alg, enc: 'XC20P', encrypt, encryptCek }\n}\n\nexport async function resolveX25519Encrypters(dids: string[], resolver: Resolver): Promise<Encrypter[]> {\n  return Promise.all(\n    dids.map(async (did) => {\n      const didDoc = await resolver.resolve(did)\n      if (!didDoc.keyAgreement) throw new Error(`Could not find x25519 key for ${did}`)\n      const agreementKeys: PublicKey[] = didDoc.keyAgreement?.map((key) => {\n        if (typeof key === 'string') {\n          return didDoc.publicKey.find((pk) => pk.id === key)\n        }\n        return key\n      })\n      const pk = agreementKeys.find((key) => {\n        return key.type === 'X25519KeyAgreementKey2019' && Boolean(key.publicKeyBase58)\n      })\n      if (!pk) throw new Error(`Could not find x25519 key for ${did}`)\n      return x25519Encrypter(base58ToBytes(pk.publicKeyBase58), pk.id)\n    })\n  )\n}\n\nfunction validateHeader(header: Record<string, any>) {\n  if(!(\n    header.epk &&\n    header.iv &&\n    header.tag\n  )) {\n    throw new Error('Invalid JWE')\n  }\n}\n\nexport function x25519Decrypter(secretKey: Uint8Array): Decrypter {\n  const alg = 'ECDH-ES+XC20PKW'\n  const keyLen = 256\n  const crv = 'X25519'\n  async function decrypt(sealed, iv, aad, recipient): Promise<Uint8Array> {\n    validateHeader(recipient.header)\n    if (recipient.header.epk.crv !== crv) return null\n    const publicKey = base64ToBytes(recipient.header.epk.x)\n    const sharedSecret = sharedKey(secretKey, publicKey)\n\n    // Key Encryption Key\n    const kek = concatKDF(sharedSecret, keyLen, alg)\n    // Content Encryption Key\n    const sealedCek = toSealed(recipient.encrypted_key, recipient.header.tag)\n    const cek = await xc20pDirDecrypter(kek).decrypt(sealedCek, base64ToBytes(recipient.header.iv))\n    if (cek === null) return null\n\n    return xc20pDirDecrypter(cek).decrypt(sealed, iv, aad)\n  }\n  return { alg, enc: 'XC20P', decrypt }\n}\n","import { Signer } from '../JWT'\nimport { ES256KSigner } from './ES256KSigner'\n\n/**\n * @deprecated Please use ES256KSigner\n *  The EllipticSigner returns a configured function for signing data.\n *\n *  @example\n *  ```typescript\n *  const signer = EllipticSigner(process.env.PRIVATE_KEY)\n *  signer(data).then( (signature: string) => {\n *    ...\n *  })\n *  ```\n * \n *  @param    {String}         hexPrivateKey    a hex encoded private key\n *  @return   {Function}                        a configured signer function\n */\nfunction EllipticSigner(hexPrivateKey: string): Signer {\n  return ES256KSigner(hexPrivateKey)\n}\n\nexport default EllipticSigner\n","import { sign } from '@stablelib/ed25519'\nimport { EdDSASigner as EdDSASigner } from './EdDSASigner'\nimport { Signer } from '../JWT'\nimport { base64ToBytes, bytesToBase64url, stringToBytes } from '../util'\n\n/**\n * @deprecated Please use EdDSASigner\n * \n *  The NaclSigner returns a configured function for signing data using the Ed25519 algorithm.\n *\n *  The signing function itself takes the data as a `string` or `Uint8Array` parameter and returns a `base64Url`-encoded signature.\n *\n *  @example\n *  const signer = NaclSigner(process.env.PRIVATE_KEY)\n *  const data: string = '...'\n *  signer(data).then( (signature: string) => {\n *    ...\n *  })\n *\n *  @param    {String}   base64PrivateKey    a 64 byte base64 encoded private key\n *  @return   {Function}                     a configured signer function\n */\n\nfunction NaclSigner(base64PrivateKey: string): Signer {\n  return EdDSASigner(base64PrivateKey)\n}\n\nexport default NaclSigner\n","import { fromJose } from '../util'\nimport { Signer } from '../JWT'\nimport { ES256KSigner } from './ES256KSigner'\n\n/**\n * @deprecated Please use ES256KSigner\n *  The SimpleSigner returns a configured function for signing data.\n *\n *  @example\n *  const signer = SimpleSigner(process.env.PRIVATE_KEY)\n *  signer(data, (err, signature) => {\n *    ...\n *  })\n *\n *  @param    {String}         hexPrivateKey    a hex encoded private key\n *  @return   {Function}                     a configured signer function\n */\nfunction SimpleSigner(hexPrivateKey: string): Signer {\n  const signer = ES256KSigner(hexPrivateKey, true)\n  return async (data) => {\n    const signature = (await signer(data)) as string\n    return fromJose(signature)\n  }\n}\n\nexport default SimpleSigner\n"],"names":["bytesToBase64url","b","u8a","base64ToBytes","s","inputBase64Url","replace","base58ToBytes","hexToBytes","input","startsWith","substring","toLowerCase","encodeBase64url","decodeBase64url","bytesToHex","stringToBytes","toJose","recoverable","r","recoveryParam","jose","Uint8Array","set","undefined","Error","fromJose","signature","signatureBytes","length","TypeError","slice","toSealed","ciphertext","tag","hexMatcher","base58Matcher","base64Matcher","parseKey","test","leftpad","data","size","repeat","sha256","payload","hash","toEthereumAddress","hexPublicKey","hashInput","keccak_256","arrayBuffer","writeUint32BE","value","array","encoded","toString","lengthAndInput","concatKDF","secret","keyLen","alg","secp256k1","EC","ES256KSigner","privateKey","privateKeyBytes","keyPair","keyFromPrivate","sign","EdDSASigner","secretKey","dataBytes","sig","toSignatureObject","rawsig","sigObj","extractPublicKeyBytes","pk","publicKeyBase58","publicKeyBase64","publicKeyHex","verifyRecoverableES256K","authenticators","signatures","so","signer","map","recoveredKey","recoverPubKey","recoveredPublicKeyHex","encode","recoveredCompressedPublicKeyHex","recoveredAddress","find","ethereumAddress","filter","key","verifyEd25519","clear","verify","algorithms","ES256K","fullPublicKeys","ethAddressKeys","pubBytes","keyFromPublic","err","ES256K-R","Ed25519","EdDSA","VerifierAlgorithm","impl","instanceOfEcdsaSignature","object","ES256KSignerAlg","Ed25519SignerAlg","createJWS","header","defaultAlg","encodedPayload","encodeSection","signingInput","join","jwtSigner","SignerAlgorithm","SUPPORTED_PUBLIC_KEY_TYPES","JSON","stringify","decodeJWS","jws","parts","match","parse","decodeJWT","jwt","Object","assign","e","verifyJWSDecoded","pubkeys","Array","isArray","decryptJWE","bind","pact","_settle","state","onFulfilled","_this","onRejected","result","encodeJWE","aad","recipient","jwe","protected","protectedHeader","iv","recipients","xc20pEncrypter","cipher","XChaCha20Poly1305","cleartext","randomBytes","nonceLength","sealed","seal","subarray","tagLength","xc20pDirEncrypter","xc20pEncrypt","enc","encrypt","protHeader","encodedAad","Buffer","from","xc20pDirDecrypter","decrypt","open","x25519Encrypter","publicKey","kid","encryptCek","cek","epk","generateKeyPair","res","sharedKey","encrypted_key","kty","crv","x","hexPrivateKey","base64PrivateKey","encrypters","encryptionResult","tmpEnc","reduce","acc","encrypter","_jwe$recipients2","push","_push2","issuer","expiresIn","typ","timestamps","iat","Math","floor","Date","now","exp","nbf","fullPayload","iss","decrypter","rec","validateJWE","i","dids","resolver","Promise","all","did","resolve","didDoc","keyAgreement","_didDoc$keyAgreement","id","type","Boolean","options","auth","audience","callbackUrl","skewTime","types","doc","getPublicKeyById","pubid","filtered","publicKeysToCheck","authentication","authEntry","supported","resolveAuthenticator","nowSkewed","aud","item","validateHeader","kek","sealedCek"],"mappings":"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"}